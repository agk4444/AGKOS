# AGK System AST Template - Low-Level System Programming
# This template demonstrates low-level system programming constructs including
# memory management, file I/O, process/thread operations, network sockets,
# hardware access, and kernel-level operations
# Perfect for: System utilities, device drivers, embedded systems, OS development

import system_ast
import io
import logging
import network
import fs

# Global configuration
define constant BUFFER_SIZE as Integer = 1024
define constant SERVER_PORT as Integer = 8080
define constant TEST_FILE as String = "system_demo.txt"

# Main application entry point
define function main:
    # Initialize logging for the system programming application
    create logger as Logger
    set logger to logging.get_logger("System_AST_App")
    logging.set_level(logger, logging.INFO)
    logging.add_console_handler(logger)

    logging.info(logger, "Starting AGK System Programming Application")

    # Run the main application loop
    run_system_application_loop(logger)

# Main application loop with menu-driven interface
define function run_system_application_loop that takes logger as Logger:
    create running as Boolean
    set running to true

    while running:
        io.println("\n⚙️ AGK System Programming Environment")
        io.println("1. Memory Management Demo")
        io.println("2. File I/O Operations")
        io.println("3. Process Management")
        io.println("4. Thread Management")
        io.println("5. Network Socket Demo")
        io.println("6. System Information")
        io.println("7. Atomic Operations")
        io.println("8. Hardware Access Demo")
        io.println("9. GPIO Operations (Embedded)")
        io.println("10. PCI Configuration")
        io.println("11. DMA Operations")
        io.println("12. Exit")
        io.print("Enter your choice (1-12): ")

        create choice as String
        set choice to io.read_line()

        if choice == "1":
            memory_management_demo(logger)
        else if choice == "2":
            file_operations_demo(logger)
        else if choice == "3":
            process_management_demo(logger)
        else if choice == "4":
            thread_management_demo(logger)
        else if choice == "5":
            network_socket_demo(logger)
        else if choice == "6":
            system_info_demo(logger)
        else if choice == "7":
            atomic_operations_demo(logger)
        else if choice == "8":
            hardware_access_demo(logger)
        else if choice == "9":
            gpio_operations_demo(logger)
        else if choice == "10":
            pci_config_demo(logger)
        else if choice == "11":
            dma_operations_demo(logger)
        else if choice == "12":
            set running to false
            logging.info(logger, "System programming application shutting down")
        else:
            io.println("❌ Invalid choice. Please try again.")

# Memory management demonstration
define function memory_management_demo that takes logger as Logger:
    io.println("\n🧠 Memory Management Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "memory_operations")

    # Allocate memory
    create mem_size as Integer
    set mem_size to 1024
    create mem_ptr as Pointer
    set mem_ptr to system_ast.allocate_memory(mem_size, 8)

    io.println("✅ Allocated " + string(mem_size) + " bytes of memory at address: " + string(mem_ptr))

    # Write data to memory
    create test_data as String
    set test_data to "Hello, System Programming!"
    system_ast.copy_memory(mem_ptr, address_of(test_data), length(test_data))

    io.println("✅ Copied data to allocated memory")

    # Read data back (simulated)
    io.println("✅ Data integrity verified")

    # Set memory to specific value
    system_ast.set_memory(mem_ptr, 0x00, mem_size)
    io.println("✅ Memory cleared with memset")

    # Free memory
    system_ast.free_memory(mem_ptr)
    io.println("✅ Memory deallocated")

    logging.end_timer(timer)
    logging.info(logger, "Memory management operations completed")

# File I/O operations demo
define function file_operations_demo that takes logger as Logger:
    io.println("\n📁 File I/O Operations Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "file_operations")

    # Create test file content
    create file_content as String
    set file_content to "This is a test file created by system programming demo.\nIt demonstrates low-level file operations."

    # Write content using system calls
    create fd as Integer
    set fd to system_ast.open_file(TEST_FILE, system_ast.O_WRONLY | system_ast.O_CREAT, 0644)

    if fd > 0:
        create bytes_written as Integer
        set bytes_written to system_ast.write_file(fd, address_of(file_content), length(file_content))
        io.println("✅ Wrote " + string(bytes_written) + " bytes to file")

        system_ast.close_file(fd)

        # Read file back using system calls
        set fd to system_ast.open_file(TEST_FILE, system_ast.O_RDONLY, 0)

        if fd > 0:
            create buffer as String
            set buffer to " " * BUFFER_SIZE
            create bytes_read as Integer
            set bytes_read to system_ast.read_file(fd, address_of(buffer), BUFFER_SIZE)

            io.println("✅ Read " + string(bytes_read) + " bytes from file")
            io.println("Content preview: " + substring(buffer, 0, 50) + "...")

            system_ast.close_file(fd)
        else:
            io.println("❌ Failed to open file for reading")
    else:
        io.println("❌ Failed to open file for writing")

    logging.end_timer(timer)
    logging.info(logger, "File I/O operations completed")

# Process management demo
define function process_management_demo that takes logger as Logger:
    io.println("\n🔄 Process Management Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "process_operations")

    io.print("Enter command to execute: ")
    create command as String
    set command to io.read_line()

    if command == "":
        set command to "echo 'Hello from child process!'"

    # Create process
    create args as List
    add command to args

    create pid as Integer
    set pid to system_ast.create_process(command, args)

    if pid > 0:
        io.println("✅ Created child process with PID: " + string(pid))

        # Wait for process to complete
        create status as Integer
        create wait_result as Integer
        set wait_result to system_ast.wait_process(pid, address_of(status))

        if wait_result == pid:
            io.println("✅ Child process completed with status: " + string(status))
        else:
            io.println("❌ Error waiting for child process")
    else:
        io.println("❌ Failed to create child process")

    logging.end_timer(timer)
    logging.info(logger, "Process management operations completed")

# Thread management demo
define function thread_management_demo that takes logger as Logger:
    io.println("\n🧵 Thread Management Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "thread_operations")

    # Create a worker thread
    create thread_args as List
    add "Thread Demo" to thread_args

    create thread_id as Integer
    set thread_id to system_ast.create_thread(address_of(worker_thread_function), thread_args)

    if thread_id > 0:
        io.println("✅ Created worker thread with ID: " + string(thread_id))

        # Wait for thread to complete
        create join_result as Integer
        set join_result to system_ast.join_thread(thread_id)

        if join_result == 0:
            io.println("✅ Worker thread completed successfully")
        else:
            io.println("❌ Error joining worker thread")
    else:
        io.println("❌ Failed to create worker thread")

    logging.end_timer(timer)
    logging.info(logger, "Thread management operations completed")

# Worker thread function
define function worker_thread_function that takes args as List:
    create thread_name as String
    set thread_name to args[0]

    io.println("🧵 [" + thread_name + "] Starting work...")
    io.println("🧵 [" + thread_name + "] Performing calculations...")

    # Simulate work
    create i as Integer
    set i to 0
    while i < 1000000:
        set i to i + 1

    io.println("🧵 [" + thread_name + "] Work completed!")
    return 0

# Network socket demo
define function network_socket_demo that takes logger as Logger:
    io.println("\n🌐 Network Socket Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "network_operations")

    # Create socket
    create sockfd as Integer
    set sockfd to system_ast.create_socket(system_ast.AF_INET, system_ast.SOCK_STREAM, 0)

    if sockfd > 0:
        io.println("✅ Created TCP socket: " + string(sockfd))

        # Bind socket to address
        # This would typically set up a sockaddr_in structure
        create bind_result as Integer
        set bind_result to system_ast.bind_socket(sockfd, 0, 0)  # Mock addresses

        if bind_result == 0:
            io.println("✅ Socket bound to address")

            # Listen for connections
            create listen_result as Integer
            set listen_result to system_ast.listen_socket(sockfd, 5)

            if listen_result == 0:
                io.println("✅ Socket listening on port " + string(SERVER_PORT))

                io.println("ℹ️ Socket operations completed (demo mode)")
                io.println("In a real implementation, this would accept client connections")

            system_ast.close_socket(sockfd)
            io.println("✅ Socket closed")
        else:
            io.println("❌ Failed to bind socket")
            system_ast.close_socket(sockfd)
    else:
        io.println("❌ Failed to create socket")

    logging.end_timer(timer)
    logging.info(logger, "Network socket operations completed")

# System information demo
define function system_info_demo that takes logger as Logger:
    io.println("\n💻 System Information")

    create timer as Timer
    set timer to logging.start_timer(logger, "system_info")

    # Get system information
    create uname_info as Object
    set uname_info to system_ast.get_system_info("uname")

    io.println("System Name: " + uname_info["sysname"])
    io.println("Node Name: " + uname_info["nodename"])
    io.println("Release: " + uname_info["release"])
    io.println("Version: " + uname_info["version"])
    io.println("Machine: " + uname_info["machine"])

    # Get CPU information
    create cpu_info as Object
    set cpu_info to system_ast.get_system_info("cpuinfo")

    io.println("Processor: " + cpu_info["processor"])
    io.println("CPU Cores: " + string(cpu_info["cores"]))
    io.println("Frequency: " + cpu_info["frequency"])

    # Get memory information
    create mem_info as Object
    set mem_info to system_ast.get_system_info("meminfo")

    io.println("Total Memory: " + mem_info["total_memory"])
    io.println("Free Memory: " + mem_info["free_memory"])

    # Get current time
    create current_time as Integer
    set current_time to system_ast.get_current_time()
    io.println("Current Time: " + string(current_time))

    logging.end_timer(timer)
    logging.info(logger, "System information retrieved")

# Atomic operations demo
define function atomic_operations_demo that takes logger as Logger:
    io.println("\n⚛️ Atomic Operations Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "atomic_operations")

    # Allocate memory for atomic operations
    create atomic_var as Pointer
    set atomic_var to system_ast.allocate_memory(8, 8)

    # Initialize value
    system_ast.set_memory(atomic_var, 0, 8)

    io.println("✅ Allocated atomic variable")

    # Perform atomic operations
    create result1 as Integer
    set result1 to system_ast.atomic_increment(atomic_var)
    io.println("Atomic increment result: " + string(result1))

    create result2 as Integer
    set result2 to system_ast.atomic_add(atomic_var, 5)
    io.println("Atomic add result: " + string(result2))

    create result3 as Integer
    set result3 to system_ast.atomic_decrement(atomic_var)
    io.println("Atomic decrement result: " + string(result3))

    # Memory barrier
    system_ast.memory_barrier("full")
    io.println("✅ Memory barrier executed")

    # Free memory
    system_ast.free_memory(atomic_var)
    io.println("✅ Atomic variable deallocated")

    logging.end_timer(timer)
    logging.info(logger, "Atomic operations completed")

# Hardware access demo
define function hardware_access_demo that takes logger as Logger:
    io.println("\n🔧 Hardware Access Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "hardware_access")

    # Port I/O operations
    io.println("Port I/O Operations:")

    create port_value as Integer
    set port_value to system_ast.port_read_byte(0x60)  # Keyboard controller port
    io.println("✅ Read from port 0x60: " + string(port_value))

    system_ast.port_write_byte(0x80, 0x00)  # Dummy port write
    io.println("✅ Wrote to port 0x80")

    # Memory-mapped I/O
    io.println("\nMemory-Mapped I/O:")

    create mmio_value as Integer
    set mmio_value to system_ast.mmio_read(0x1000, "dword")
    io.println("✅ MMIO read from 0x1000: " + string(mmio_value))

    system_ast.mmio_write(0x1000, 0x12345678, "dword")
    io.println("✅ MMIO write to 0x1000")

    # Device register access
    io.println("\nDevice Register Access:")

    create reg_value as Integer
    set reg_value to system_ast.read_device_register("timer", "count")
    io.println("✅ Read timer register: " + string(reg_value))

    system_ast.write_device_register("timer", "control", 0x36)
    io.println("✅ Wrote to timer control register")

    logging.end_timer(timer)
    logging.info(logger, "Hardware access operations completed")

# GPIO operations demo (for embedded systems)
define function gpio_operations_demo that takes logger as Logger:
    io.println("\n📌 GPIO Operations Demo (Embedded Systems)")

    create timer as Timer
    set timer to logging.start_timer(logger, "gpio_operations")

    # GPIO pin operations
    create pin_number as Integer
    set pin_number to 17  # GPIO17

    system_ast.gpio_set_direction(pin_number, "output")
    io.println("✅ Set GPIO" + string(pin_number) + " as output")

    system_ast.gpio_write(pin_number, 1)
    io.println("✅ Set GPIO" + string(pin_number) + " high")

    create pin_value as Integer
    set pin_value to system_ast.gpio_read(pin_number)
    io.println("✅ Read GPIO" + string(pin_number) + " value: " + string(pin_value))

    system_ast.gpio_toggle(pin_number)
    io.println("✅ Toggled GPIO" + string(pin_number))

    set pin_value to system_ast.gpio_read(pin_number)
    io.println("✅ GPIO" + string(pin_number) + " after toggle: " + string(pin_value))

    logging.end_timer(timer)
    logging.info(logger, "GPIO operations completed")

# PCI configuration demo
define function pci_config_demo that takes logger as Logger:
    io.println("\n🔌 PCI Configuration Space Access")

    create timer as Timer
    set timer to logging.start_timer(logger, "pci_operations")

    # Read PCI configuration register
    create pci_value as Integer
    set pci_value to system_ast.pci_read_config(0, 0, 0, 0, "dword")
    io.println("✅ Read PCI config (0,0,0,0): " + string(pci_value))

    # Write PCI configuration register
    system_ast.pci_write_config(0, 0, 0, 4, 0x00000000, "dword")
    io.println("✅ Wrote to PCI command register")

    logging.end_timer(timer)
    logging.info(logger, "PCI configuration operations completed")

# DMA operations demo
define function dma_operations_demo that takes logger as Logger:
    io.println("\n💾 DMA Operations Demo")

    create timer as Timer
    set timer to logging.start_timer(logger, "dma_operations")

    # Allocate DMA channel
    create channel as Integer
    set channel to system_ast.dma_allocate_channel("bidirectional")
    io.println("✅ Allocated DMA channel: " + string(channel))

    # Allocate memory for DMA
    create dma_buffer as Pointer
    set dma_buffer to system_ast.allocate_memory(BUFFER_SIZE, 64)

    io.println("✅ Allocated DMA buffer: " + string(BUFFER_SIZE) + " bytes")

    # Perform DMA transfer (simulated)
    create transfer_size as Integer
    set transfer_size to system_ast.dma_transfer(channel, dma_buffer, dma_buffer + BUFFER_SIZE, BUFFER_SIZE)
    io.println("✅ DMA transfer completed: " + string(transfer_size) + " bytes")

    # Free resources
    system_ast.free_memory(dma_buffer)
    system_ast.dma_free_channel(channel)

    io.println("✅ DMA resources freed")

    logging.end_timer(timer)
    logging.info(logger, "DMA operations completed")

# Initialize the application
main()