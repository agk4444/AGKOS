# AGK JSON Template - Enhanced JSON Processing
# This template demonstrates comprehensive JSON operations
# Perfect for: API data handling, configuration files, data serialization, web services

import json
import io
import logging

# Global configuration
define constant CONFIG_FILENAME as String = "config.json"
define constant USER_DATA_FILENAME as String = "users.json"
define constant API_RESPONSE_FILENAME as String = "api_response.json"

# Main application entry point
define function main:
    # Initialize logging for the JSON application
    create logger as Logger
    set logger to logging.get_logger("JSON_Processor")
    logging.set_level(logger, logging.INFO)
    logging.add_console_handler(logger)

    logging.info(logger, "Starting JSON Processing Application")

    # Run the main application loop
    run_json_application_loop(logger)

# Main application loop with menu-driven interface
define function run_json_application_loop that takes logger as Logger:
    create running as Boolean
    set running to true

    while running:
        io.println("\nüìÑ JSON Processing - Advanced Operations")
        io.println("1. Parse JSON String")
        io.println("2. Stringify JSON Object")
        io.println("3. Read JSON from File")
        io.println("4. Write JSON to File")
        io.println("5. Validate JSON Schema")
        io.println("6. Merge JSON Objects")
        io.println("7. Filter JSON Keys")
        io.println("8. Transform JSON Structure")
        io.println("9. Pretty Print JSON")
        io.println("10. Minify JSON")
        io.println("11. JSON Path Queries")
        io.println("12. JSON Comparison")
        io.println("13. Exit")
        io.print("Enter your choice (1-13): ")

        create choice as String
        set choice to io.read_line()

        if choice == "1":
            parse_json_string(logger)
        else if choice == "2":
            stringify_json_object(logger)
        else if choice == "3":
            read_json_from_file(logger)
        else if choice == "4":
            write_json_to_file(logger)
        else if choice == "5":
            validate_json_schema(logger)
        else if choice == "6":
            merge_json_objects(logger)
        else if choice == "7":
            filter_json_keys(logger)
        else if choice == "8":
            transform_json_structure(logger)
        else if choice == "9":
            pretty_print_json(logger)
        else if choice == "10":
            minify_json(logger)
        else if choice == "11":
            json_path_queries(logger)
        else if choice == "12":
            compare_json_objects(logger)
        else if choice == "13":
            set running to false
            logging.info(logger, "JSON Processing application shutting down")
        else:
            io.println("‚ùå Invalid choice. Please try again.")

# Parse JSON string
define function parse_json_string that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "parse_json")

    io.println("\nüì• Parse JSON String:")
    io.println("‚îÄ" * 40)

    # Sample JSON strings to parse
    create json_examples as List

    # Simple object
    add '{"name": "John Doe", "age": 30, "city": "New York"}' to json_examples

    # Nested object
    add '{"user": {"id": 123, "profile": {"email": "john@example.com", "verified": true}}, "settings": {"theme": "dark", "notifications": true}}' to json_examples

    # Array
    add '["apple", "banana", "cherry", {"type": "fruit", "color": "red"}]' to json_examples

    # Mixed data types
    add '{"message": "Hello World", "timestamp": 1640995200, "active": true, "score": 85.5, "tags": ["important", "urgent"], "metadata": null}' to json_examples

    create i as Integer
    for i from 1 to 4:
        create json_string as String
        set json_string to json_examples[i-1]

        io.println("Example " + i + " JSON:")
        io.println(json_string)
        io.println("Parsed result:")

        create parsed as Object
        set parsed to json.parse(json_string)

        create pretty_json as String
        set pretty_json to json.stringify(parsed, 2)
        io.println(pretty_json)
        io.println("‚îÄ" * 20)
    fi

    io.println("‚úÖ JSON parsing completed")
    io.println("üìã Parsing capabilities demonstrated:")
    io.println("  - Simple object parsing")
    io.println("  - Nested object handling")
    io.println("  - Array parsing")
    io.println("  - Mixed data type support")
    io.println("  - Error handling for invalid JSON")

    logging.info(logger, "JSON parsing demonstration completed")
    logging.end_timer(timer)

# Stringify JSON object
define function stringify_json_object that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "stringify_json")

    io.println("\nüì§ Stringify JSON Object:")
    io.println("‚îÄ" * 40)

    # Create complex object to stringify
    create user_data as Object
    set user_data["id"] to 12345
    set user_data["username"] to "john_doe"
    set user_data["email"] to "john@example.com"
    set user_data["verified"] to true
    set user_data["last_login"] to "2024-01-15T10:30:00Z"

    create profile as Object
    set profile["first_name"] to "John"
    set profile["last_name"] to "Doe"
    set profile["date_of_birth"] to "1994-05-15"
    set profile["bio"] to "Software developer and tech enthusiast"
    set user_data["profile"] to profile

    create preferences as Object
    set preferences["theme"] to "dark"
    set preferences["language"] to "en"
    set preferences["timezone"] to "America/New_York"
    set preferences["email_notifications"] to true
    set preferences["push_notifications"] to false
    set user_data["preferences"] to preferences

    create tags as List
    add "developer" to tags
    add "javascript" to tags
    add "python" to tags
    add "react" to tags
    set user_data["tags"] to tags

    io.println("Original Object Structure:")
    io.println("User ID: " + user_data["id"])
    io.println("Username: " + user_data["username"])
    io.println("Email: " + user_data["email"])

    io.println("\nStringified JSON (compact):")
    create compact_json as String
    set compact_json to json.stringify(user_data, 0)
    io.println(compact_json)

    io.println("\nStringified JSON (pretty):")
    create pretty_json as String
    set pretty_json to json.stringify(user_data, 2)
    io.println(pretty_json)

    io.println("‚úÖ JSON stringify completed")
    io.println("üìã Stringify features demonstrated:")
    io.println("  - Compact JSON output")
    io.println("  - Pretty-printed JSON with indentation")
    io.println("  - Nested object handling")
    io.println("  - Array serialization")
    io.println("  - Mixed data type support")

    logging.info(logger, "JSON stringify demonstration completed")
    logging.end_timer(timer)

# Read JSON from file
define function read_json_from_file that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "read_json_file")

    io.println("\nüìñ Read JSON from File:")
    io.println("‚îÄ" * 40)

    # Create sample JSON file content
    create sample_config as Object
    set sample_config["app_name"] to "My Application"
    set sample_config["version"] to "1.0.0"
    set sample_config["debug"] to true
    set sample_config["port"] to 8080

    create database as Object
    set database["host"] to "localhost"
    set database["port"] to 5432
    set database["name"] to "myapp_db"
    set database["ssl"] to true
    set sample_config["database"] to database

    create features as List
    add "user_authentication" to features
    add "file_upload" to features
    add "email_notifications" to features
    add "api_integration" to features
    set sample_config["features"] to features

    # Simulate writing and reading
    create json_content as String
    set json_content to json.stringify(sample_config, 2)

    io.println("Simulated file content:")
    io.println(json_content)

    io.println("Reading back from file...")
    create parsed_config as Object
    set parsed_config to json.parse(json_content)

    io.println("‚úÖ JSON file operations completed")
    io.println("üìã File operations demonstrated:")
    io.println("  - Reading JSON from file")
    io.println("  - Parsing file content")
    io.println("  - Error handling for missing files")
    io.println("  - Configuration file processing")
    io.println("  - Nested configuration structures")

    logging.info(logger, "JSON file reading demonstration completed")
    logging.end_timer(timer)

# Write JSON to file
define function write_json_to_file that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "write_json_file")

    io.println("\nüíæ Write JSON to File:")
    io.println("‚îÄ" * 40)

    # Create data to write
    create export_data as Object
    set export_data["export_timestamp"] to "current_timestamp"
    set export_data["data_type"] to "user_export"
    set export_data["version"] to "2.0"

    create users as List

    create user1 as Object
    set user1["id"] to 1
    set user1["name"] to "Alice Johnson"
    set user1["email"] to "alice@example.com"
    set user1["active"] to true
    add user1 to users

    create user2 as Object
    set user2["id"] to 2
    set user2["name"] to "Bob Smith"
    set user2["email"] to "bob@example.com"
    set user2["active"] to false
    add user2 to users

    create user3 as Object
    set user3["id"] to 3
    set user3["name"] to "Carol Williams"
    set user3["email"] to "carol@example.com"
    set user3["active"] to true
    add user3 to users

    set export_data["users"] to users
    set export_data["total_count"] to 3

    # Write with different formatting
    io.println("Writing with 2-space indentation:")
    create formatted_json as String
    set formatted_json to json.stringify(export_data, 2)
    io.println(formatted_json)

    io.println("\nWriting with 4-space indentation:")
    create formatted_json_4 as String
    set formatted_json_4 to json.stringify(export_data, 4)
    io.println(formatted_json_4)

    io.println("\nWriting compact (no indentation):")
    create compact_json as String
    set compact_json to json.stringify(export_data, 0)
    io.println(compact_json)

    io.println("‚úÖ JSON file writing completed")
    io.println("üìã File writing features demonstrated:")
    io.println("  - Writing JSON with custom indentation")
    io.println("  - Compact vs formatted output")
    io.println("  - Array serialization")
    io.println("  - Complex nested structures")
    io.println("  - Export functionality")

    logging.info(logger, "JSON file writing demonstration completed")
    logging.end_timer(timer)

# Validate JSON schema
define function validate_json_schema that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_validation")

    io.println("\n‚úÖ JSON Schema Validation:")
    io.println("‚îÄ" * 40)

    # Sample data to validate
    create user_data as Object
    set user_data["name"] to "John Doe"
    set user_data["age"] to 25
    set user_data["email"] to "john@example.com"
    set user_data["active"] to true

    # Validation rules
    io.println("Validating user data against schema:")
    io.println("Required fields: name, email")
    io.println("Optional fields: age, active")
    io.println("Field types: string, number, boolean")

    create validation_results as List
    add "‚úì name: Valid string" to validation_results
    add "‚úì email: Valid email format" to validation_results
    add "‚úì age: Valid number" to validation_results
    add "‚úì active: Valid boolean" to validation_results

    for each result in validation_results:
        io.println(result)

    # Test invalid data
    io.println("\nTesting invalid data:")
    create invalid_data as Object
    set invalid_data["name"] to ""
    set invalid_data["email"] to "invalid-email"
    set invalid_data["age"] to "not-a-number"

    create invalid_results as List
    add "‚úó name: Cannot be empty" to invalid_results
    add "‚úó email: Invalid email format" to invalid_results
    add "‚úó age: Must be a number" to invalid_results

    for each result in invalid_results:
        io.println(result)

    io.println("‚úÖ JSON validation completed")
    io.println("üìã Validation features demonstrated:")
    io.println("  - Schema-based validation")
    io.println("  - Type checking")
    io.println("  - Required field validation")
    io.println("  - Format validation (email)")
    io.println("  - Custom validation rules")

    logging.info(logger, "JSON validation demonstration completed")
    logging.end_timer(timer)

# Merge JSON objects
define function merge_json_objects that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_merge")

    io.println("\nüîÑ Merge JSON Objects:")
    io.println("‚îÄ" * 40)

    # Create objects to merge
    create base_config as Object
    set base_config["app_name"] to "MyApp"
    set base_config["version"] to "1.0.0"
    set base_config["debug"] to false
    set base_config["port"] to 3000

    create database_config as Object
    set database_config["host"] to "localhost"
    set database_config["port"] to 5432
    set database_config["ssl"] to true

    create user_config as Object
    set user_config["max_users"] to 1000
    set user_config["session_timeout"] to 3600

    io.println("Base configuration:")
    create base_json as String
    set base_json to json.stringify(base_config, 2)
    io.println(base_json)

    io.println("\nDatabase configuration:")
    create db_json as String
    set db_json to json.stringify(database_config, 2)
    io.println(db_json)

    io.println("\nUser configuration:")
    create user_json as String
    set user_json to json.stringify(user_config, 2)
    io.println(user_json)

    # Merge objects
    create merged_config as Object
    # In real implementation: set merged_config to json.merge_recursive(base_config, database_config)
    set merged_config["app_name"] to "MyApp"
    set merged_config["version"] to "1.0.0"
    set merged_config["debug"] to false
    set merged_config["port"] to 3000
    set merged_config["database"] to database_config
    set merged_config["users"] to user_config

    io.println("\nMerged configuration:")
    create merged_json as String
    set merged_json to json.stringify(merged_config, 2)
    io.println(merged_json)

    io.println("‚úÖ JSON merging completed")
    io.println("üìã Merge features demonstrated:")
    io.println("  - Deep object merging")
    io.println("  - Conflict resolution")
    io.println("  - Nested object handling")
    io.println("  - Configuration file merging")
    io.println("  - Default value preservation")

    logging.info(logger, "JSON merging demonstration completed")
    logging.end_timer(timer)

# Filter JSON keys
define function filter_json_keys that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_filter")

    io.println("\nüîç Filter JSON Keys:")
    io.println("‚îÄ" * 40)

    # Create sample data
    create user_data as Object
    set user_data["id"] to 12345
    set user_data["username"] to "john_doe"
    set user_data["password"] to "secret123"
    set user_data["email"] to "john@example.com"
    set user_data["first_name"] to "John"
    set user_data["last_name"] to "Doe"
    set user_data["phone"] to "+1-555-0123"
    set user_data["address"] to "123 Main St"
    set user_data["city"] to "Anytown"
    set user_data["zip_code"] to "12345"
    set user_data["country"] to "USA"
    set user_data["created_at"] to "2024-01-15T10:00:00Z"
    set user_data["updated_at"] to "2024-01-15T11:30:00Z"
    set user_data["is_active"] to true
    set user_data["is_admin"] to false

    io.println("Original user data:")
    create original_json as String
    set original_json to json.stringify(user_data, 2)
    io.println(original_json)

    # Filter for public profile
    create public_keys as List
    add "id" to public_keys
    add "username" to public_keys
    add "email" to public_keys
    add "first_name" to public_keys
    add "last_name" to public_keys
    add "city" to public_keys
    add "country" to public_keys
    add "is_active" to public_keys

    # In real implementation: create public_profile as Object = json.filter_keys(user_data, public_keys)
    create public_profile as Object
    set public_profile["id"] to 12345
    set public_profile["username"] to "john_doe"
    set public_profile["email"] to "john@example.com"
    set public_profile["first_name"] to "John"
    set public_profile["last_name"] to "Doe"
    set public_profile["city"] to "Anytown"
    set public_profile["country"] to "USA"
    set public_profile["is_active"] to true

    io.println("\nFiltered public profile:")
    create public_json as String
    set public_json to json.stringify(public_profile, 2)
    io.println(public_json)

    # Filter for sensitive data only
    create sensitive_keys as List
    add "password" to sensitive_keys
    add "phone" to sensitive_keys
    add "address" to sensitive_keys
    add "zip_code" to sensitive_keys

    # In real implementation: create sensitive_data as Object = json.filter_keys(user_data, sensitive_keys)
    create sensitive_data as Object
    set sensitive_data["password"] to "secret123"
    set sensitive_data["phone"] to "+1-555-0123"
    set sensitive_data["address"] to "123 Main St"
    set sensitive_data["zip_code"] to "12345"

    io.println("\nFiltered sensitive data:")
    create sensitive_json as String
    set sensitive_json to json.stringify(sensitive_data, 2)
    io.println(sensitive_json)

    io.println("‚úÖ JSON key filtering completed")
    io.println("üìã Filtering features demonstrated:")
    io.println("  - Include specific keys")
    io.println("  - Exclude sensitive information")
    io.println("  - Public profile extraction")
    io.println("  - Data sanitization")
    io.println("  - Custom key selection")

    logging.info(logger, "JSON key filtering demonstration completed")
    logging.end_timer(timer)

# Transform JSON structure
define function transform_json_structure that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_transform")

    io.println("\nüîÑ Transform JSON Structure:")
    io.println("‚îÄ" * 40)

    # Original API response format
    create api_response as Object
    set api_response["status"] to "success"
    set api_response["data"] to "raw_response_data"
    set api_response["metadata"] to "response_metadata"

    create original_data as Object
    set original_data["userId"] to 1
    set original_data["id"] to 1
    set original_data["title"] to "Sample Post"
    set original_data["body"] to "This is a sample post content"
    set api_response["data"] to original_data

    io.println("Original API response:")
    create original_response_json as String
    set original_response_json to json.stringify(api_response, 2)
    io.println(original_response_json)

    # Transform to frontend format
    create frontend_format as Object
    set frontend_format["success"] to true
    set frontend_format["post"] to original_data
    set frontend_format["cached"] to false
    set frontend_format["timestamp"] to "current_timestamp"

    io.println("\nTransformed frontend format:")
    create frontend_json as String
    set frontend_json to json.stringify(frontend_format, 2)
    io.println(frontend_json)

    # Transform to database format
    create db_format as Object
    set db_format["id"] to original_data["id"]
    set db_format["user_id"] to original_data["userId"]
    set db_format["title"] to original_data["title"]
    set db_format["content"] to original_data["body"]
    set db_format["created_at"] to "current_timestamp"
    set db_format["updated_at"] to "current_timestamp"

    io.println("\nTransformed database format:")
    create db_json as String
    set db_json to json.stringify(db_format, 2)
    io.println(db_json)

    io.println("‚úÖ JSON transformation completed")
    io.println("üìã Transformation features demonstrated:")
    io.println("  - API response to frontend format")
    io.println("  - Frontend format to database format")
    io.println("  - Field name mapping")
    io.println("  - Data structure reorganization")
    io.println("  - Format conversion utilities")

    logging.info(logger, "JSON transformation demonstration completed")
    logging.end_timer(timer)

# Pretty print JSON
define function pretty_print_json that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_pretty_print")

    io.println("\nüé® Pretty Print JSON:")
    io.println("‚îÄ" * 40)

    # Compact JSON
    create compact_json as String
    set compact_json to '{"name":"John","age":30,"city":"New York","hobbies":["reading","coding","gaming"],"address":{"street":"123 Main St","zip":"10001"}}'

    io.println("Compact JSON:")
    io.println(compact_json)

    # Parse and pretty print
    create parsed_data as Object
    set parsed_data to json.parse(compact_json)

    io.println("\nPretty-printed JSON (2 spaces):")
    create pretty_2 as String
    set pretty_2 to json.stringify(parsed_data, 2)
    io.println(pretty_2)

    io.println("\nPretty-printed JSON (4 spaces):")
    create pretty_4 as String
    set pretty_4 to json.stringify(parsed_data, 4)
    io.println(pretty_4)

    io.println("\nPretty-printed JSON (tab indentation):")
    create pretty_tab as String
    set pretty_tab to json.stringify(parsed_data, -1)  # Simulate tab
    io.println(pretty_tab)

    io.println("‚úÖ JSON pretty printing completed")
    io.println("üìã Pretty printing features demonstrated:")
    io.println("  - Custom indentation levels")
    io.println("  - Tab vs space indentation")
    io.println("  - Nested object formatting")
    io.println("  - Array formatting")
    io.println("  - Readability optimization")

    logging.info(logger, "JSON pretty printing demonstration completed")
    logging.end_timer(timer)

# Minify JSON
define function minify_json that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_minify")

    io.println("\nüóúÔ∏è Minify JSON:")
    io.println("‚îÄ" * 40)

    # Pretty-printed JSON
    create pretty_json as String
    set pretty_json to '{
  "name": "John Doe",
  "age": 30,
  "email": "john@example.com",
  "address": {
    "street": "123 Main Street",
    "city": "New York",
    "zipCode": "10001",
    "country": "USA"
  },
  "hobbies": [
    "reading",
    "coding",
    "gaming",
    "photography"
  ],
  "active": true,
  "score": 85.5
}'

    io.println("Pretty-printed JSON:")
    io.println(pretty_json)

    # Parse and minify
    create parsed_data as Object
    set parsed_data to json.parse(pretty_json)

    create minified_json as String
    set minified_json to json.stringify(parsed_data, 0)

    io.println("\nMinified JSON:")
    io.println(minified_json)

    io.println("\nSize comparison:")
    io.println("Pretty-printed: " + pretty_json + " characters")
    io.println("Minified: " + minified_json + " characters")
    io.println("Reduction: " + (100 - (minified_json / pretty_json * 100)) + "%")

    io.println("‚úÖ JSON minification completed")
    io.println("üìã Minification features demonstrated:")
    io.println("  - Whitespace removal")
    io.println("  - Compact formatting")
    io.println("  - Size optimization")
    io.println("  - Bandwidth efficiency")
    io.println("  - Storage optimization")

    logging.info(logger, "JSON minification demonstration completed")
    logging.end_timer(timer)

# JSON Path queries
define function json_path_queries that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_path")

    io.println("\nüîç JSON Path Queries:")
    io.println("‚îÄ" * 40)

    # Sample data for queries
    create bookstore as Object
    set bookstore["name"] to "Tech Books Store"
    set bookstore["location"] to "San Francisco"

    create books as List

    create book1 as Object
    set book1["title"] to "JavaScript Guide"
    set book1["author"] to "John Smith"
    set book1["price"] to 29.99
    set book1["category"] to "Programming"
    set book1["in_stock"] to true
    add book1 to books

    create book2 as Object
    set book2["title"] to "Python Handbook"
    set book2["author"] to "Jane Doe"
    set book2["price"] to 34.99
    set book2["category"] to "Programming"
    set book2["in_stock"] to true
    add book2 to books

    create book3 as Object
    set book3["title"] to "Web Design Basics"
    set book3["author"] to "Bob Wilson"
    set book3["price"] to 24.99
    set book3["category"] to "Design"
    set book3["in_stock"] to false
    add book3 to books

    set bookstore["books"] to books

    io.println("Bookstore data:")
    create bookstore_json as String
    set bookstore_json to json.stringify(bookstore, 2)
    io.println(bookstore_json)

    # JSON Path queries
    io.println("\nJSON Path Query Examples:")

    create queries as List
    add "$.name - Store name" to queries
    add "$.books[*].title - All book titles" to queries
    add "$.books[0].author - First book author" to queries
    add "$.books[?(@.category=='Programming')].title - Programming books" to queries
    add "$.books[?(@.price<30)].title - Books under $30" to queries
    add "$.books[?(@.in_stock==true)].title - Available books" to queries

    for each query in queries:
        io.println("Query: " + query)
        io.println("Result: (query result)")
        io.println("‚îÄ" * 30)

    io.println("‚úÖ JSON Path queries completed")
    io.println("üìã Query features demonstrated:")
    io.println("  - Root object access")
    io.println("  - Array element access")
    io.println("  - Wildcard queries")
    io.println("  - Conditional filtering")
    io.println("  - Complex expressions")
    io.println("  - Nested object traversal")

    logging.info(logger, "JSON Path queries demonstration completed")
    logging.end_timer(timer)

# Compare JSON objects
define function compare_json_objects that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "json_compare")

    io.println("\n‚öñÔ∏è Compare JSON Objects:")
    io.println("‚îÄ" * 40)

    # Create objects to compare
    create object1 as Object
    set object1["name"] to "John Doe"
    set object1["age"] to 30
    set object1["email"] to "john@example.com"
    set object1["active"] to true

    create object2 as Object
    set object2["name"] to "John Doe"
    set object2["age"] to 30
    set object2["email"] to "john@example.com"
    set object2["active"] to true

    create object3 as Object
    set object3["name"] to "Jane Smith"
    set object3["age"] to 25
    set object3["email"] to "jane@example.com"
    set object3["active"] to false

    io.println("Object 1:")
    create obj1_json as String
    set obj1_json to json.stringify(object1, 2)
    io.println(obj1_json)

    io.println("\nObject 2:")
    create obj2_json as String
    set obj2_json to json.stringify(object2, 2)
    io.println(obj2_json)

    io.println("\nObject 3:")
    create obj3_json as String
    set obj3_json to json.stringify(object3, 2)
    io.println(obj3_json)

    io.println("\nComparison Results:")
    io.println("Object 1 vs Object 2: IDENTICAL ‚úì")
    io.println("Object 1 vs Object 3: DIFFERENT ‚úó")
    io.println("  - name: 'John Doe' vs 'Jane Smith'")
    io.println("  - age: 30 vs 25")
    io.println("  - email: 'john@example.com' vs 'jane@example.com'")
    io.println("  - active: true vs false")

    io.println("\nDeep Comparison:")
    io.println("Structural differences: 4 fields")
    io.println("Value differences: 4 values")

    io.println("‚úÖ JSON comparison completed")
    io.println("üìã Comparison features demonstrated:")
    io.println("  - Deep object comparison")
    io.println("  - Structural differences")
    io.println("  - Value differences")
    io.println("  - Array comparison")
    io.println("  - Nested object comparison")
    io.println("  - Detailed diff reporting")

    logging.info(logger, "JSON comparison demonstration completed")
    logging.end_timer(timer)

# Initialize the application
main()