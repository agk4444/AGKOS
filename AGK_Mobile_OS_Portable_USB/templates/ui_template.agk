# AGK UI Template - User Interface Components
# This template demonstrates advanced user interface components
# Perfect for: GUI applications, forms, data entry, interactive tools

import ui
import io
import logging
import json

# Global configuration
define constant WINDOW_WIDTH as Integer = 800
define constant WINDOW_HEIGHT as Integer = 600
define constant WINDOW_TITLE as String = "AGK UI Components Demo"

# Main application entry point
define function main:
    # Initialize logging for the UI application
    create logger as Logger
    set logger to logging.get_logger("UI_Demo")
    logging.set_level(logger, logging.INFO)
    logging.add_console_handler(logger)

    logging.info(logger, "Starting UI Components Demo Application")

    # Run the main application loop
    run_ui_application_loop(logger)

# Main application loop with menu-driven interface
define function run_ui_application_loop that takes logger as Logger:
    create running as Boolean
    set running to true

    while running:
        io.println("\nüé® UI Components Demo - Advanced Interface")
        io.println("1. Create Contact Form")
        io.println("2. Create Survey Form")
        io.println("3. Create Settings Panel")
        io.println("4. Create Login Form")
        io.println("5. Create Data Entry Form")
        io.println("6. Create Message Dialogs")
        io.println("7. Create Progress Indicators")
        io.println("8. Form Validation Demo")
        io.println("9. Export Form Data to JSON")
        io.println("10. Import Form Data from JSON")
        io.println("11. UI Component Showcase")
        io.println("12. Exit")
        io.print("Enter your choice (1-12): ")

        create choice as String
        set choice to io.read_line()

        if choice == "1":
            create_contact_form(logger)
        else if choice == "2":
            create_survey_form(logger)
        else if choice == "3":
            create_settings_panel(logger)
        else if choice == "4":
            create_login_form(logger)
        else if choice == "5":
            create_data_entry_form(logger)
        else if choice == "6":
            create_message_dialogs(logger)
        else if choice == "7":
            create_progress_indicators(logger)
        else if choice == "8":
            form_validation_demo(logger)
        else if choice == "9":
            export_form_data_to_json(logger)
        else if choice == "10":
            import_form_data_from_json(logger)
        else if choice == "11":
            ui_component_showcase(logger)
        else if choice == "12":
            set running to false
            logging.info(logger, "UI Components Demo shutting down")
        else:
            io.println("‚ùå Invalid choice. Please try again.")

# Create contact form
define function create_contact_form that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "contact_form")

    io.println("\nüìù Contact Form Demo:")
    io.println("‚îÄ" * 40)

    # Create form
    create contact_form as Form
    set contact_form to ui.create_form("Contact Information", 500, 400)

    # Name field with validation
    create name_field as TextField
    set name_field to ui.create_text_field("Enter your full name")
    ui.add_validation_rule(name_field, "required", "Name is required")
    ui.add_validation_rule(name_field, "min_length", "Name must be at least 2 characters")

    # Email field with validation
    create email_field as TextField
    set email_field to ui.create_text_field("Enter your email address")
    ui.add_validation_rule(email_field, "required", "Email is required")
    ui.add_validation_rule(email_field, "email", "Please enter a valid email address")

    # Phone field (optional)
    create phone_field as TextField
    set phone_field to ui.create_text_field("Enter your phone number (optional)")

    # Message textarea
    create message_field as TextField
    set message_field to ui.create_text_field("Enter your message")

    # Submit button
    create submit_button as Button
    set submit_button to ui.create_button("Submit Form", "handle_contact_submit")

    # Add components to form
    ui.add_to_form(contact_form, name_field)
    ui.add_to_form(contact_form, email_field)
    ui.add_to_form(contact_form, phone_field)
    ui.add_to_form(contact_form, message_field)
    ui.add_to_form(contact_form, submit_button)

    io.println("‚úÖ Contact form created with validation")
    io.println("üìã Form components:")
    io.println("  - Name field (required, min 2 chars)")
    io.println("  - Email field (required, email format)")
    io.println("  - Phone field (optional)")
    io.println("  - Message field")
    io.println("  - Submit button")

    logging.info(logger, "Contact form created successfully")
    logging.end_timer(timer)

# Create survey form
define function create_survey_form that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "survey_form")

    io.println("\nüìä Survey Form Demo:")
    io.println("‚îÄ" * 40)

    # Create survey form
    create survey_form as Form
    set survey_form to ui.create_form("Customer Satisfaction Survey", 600, 500)

    # Survey questions (simplified as text fields for demo)
    create satisfaction_field as TextField
    set satisfaction_field to ui.create_text_field("How satisfied are you with our service? (1-10)")
    ui.add_validation_rule(satisfaction_field, "required", "Rating is required")
    ui.add_validation_rule(satisfaction_field, "range", "Rating must be between 1-10")

    create feedback_field as TextField
    set feedback_field to ui.create_text_field("Please provide detailed feedback")

    create improvements_field as TextField
    set improvements_field to ui.create_text_field("What improvements would you suggest?")

    # Submit button
    create submit_survey_button as Button
    set submit_survey_button to ui.create_button("Submit Survey", "handle_survey_submit")

    # Add components to form
    ui.add_to_form(survey_form, satisfaction_field)
    ui.add_to_form(survey_form, feedback_field)
    ui.add_to_form(survey_form, improvements_field)
    ui.add_to_form(survey_form, submit_survey_button)

    io.println("‚úÖ Survey form created with validation")
    io.println("üìã Survey components:")
    io.println("  - Satisfaction rating (1-10)")
    io.println("  - Detailed feedback")
    io.println("  - Improvement suggestions")
    io.println("  - Submit button")

    logging.info(logger, "Survey form created successfully")
    logging.end_timer(timer)

# Create settings panel
define function create_settings_panel that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "settings_panel")

    io.println("\n‚öôÔ∏è Settings Panel Demo:")
    io.println("‚îÄ" * 40)

    # Create settings form
    create settings_form as Form
    set settings_form to ui.create_form("Application Settings", 550, 450)

    # General settings
    create theme_field as TextField
    set theme_field to ui.create_text_field("Theme (light/dark)")
    ui.add_validation_rule(theme_field, "required", "Theme selection is required")

    create language_field as TextField
    set language_field to ui.create_text_field("Language (en/es/fr)")
    ui.add_validation_rule(language_field, "required", "Language selection is required")

    # Notification settings
    create email_notifications_field as TextField
    set email_notifications_field to ui.create_text_field("Email notifications (true/false)")
    ui.add_validation_rule(email_notifications_field, "boolean", "Must be true or false")

    create push_notifications_field as TextField
    set push_notifications_field to ui.create_text_field("Push notifications (true/false)")
    ui.add_validation_rule(push_notifications_field, "boolean", "Must be true or false")

    # Privacy settings
    create data_sharing_field as TextField
    set data_sharing_field to ui.create_text_field("Data sharing (true/false)")
    ui.add_validation_rule(data_sharing_field, "boolean", "Must be true or false")

    # Buttons
    create save_settings_button as Button
    set save_settings_button to ui.create_button("Save Settings", "handle_settings_save")

    create reset_settings_button as Button
    set reset_settings_button to ui.create_button("Reset to Defaults", "handle_settings_reset")

    # Add components to form
    ui.add_to_form(settings_form, theme_field)
    ui.add_to_form(settings_form, language_field)
    ui.add_to_form(settings_form, email_notifications_field)
    ui.add_to_form(settings_form, push_notifications_field)
    ui.add_to_form(settings_form, data_sharing_field)
    ui.add_to_form(settings_form, save_settings_button)
    ui.add_to_form(settings_form, reset_settings_button)

    io.println("‚úÖ Settings panel created with validation")
    io.println("üìã Settings categories:")
    io.println("  - General: Theme, Language")
    io.println("  - Notifications: Email, Push")
    io.println("  - Privacy: Data sharing")
    io.println("  - Actions: Save, Reset")

    logging.info(logger, "Settings panel created successfully")
    logging.end_timer(timer)

# Create login form
define function create_login_form that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "login_form")

    io.println("\nüîê Login Form Demo:")
    io.println("‚îÄ" * 40)

    # Create login form
    create login_form as Form
    set login_form to ui.create_form("User Login", 400, 300)

    # Username field
    create username_field as TextField
    set username_field to ui.create_text_field("Enter username")
    ui.add_validation_rule(username_field, "required", "Username is required")
    ui.add_validation_rule(username_field, "min_length", "Username must be at least 3 characters")

    # Password field
    create password_field as TextField
    set password_field to ui.create_text_field("Enter password")
    ui.add_validation_rule(password_field, "required", "Password is required")
    ui.add_validation_rule(password_field, "min_length", "Password must be at least 6 characters")

    # Remember me checkbox (simulated)
    create remember_field as TextField
    set remember_field to ui.create_text_field("Remember me (true/false)")
    ui.add_validation_rule(remember_field, "boolean", "Must be true or false")

    # Buttons
    create login_button as Button
    set login_button to ui.create_button("Login", "handle_login")

    create forgot_password_button as Button
    set forgot_password_button to ui.create_button("Forgot Password", "handle_forgot_password")

    # Add components to form
    ui.add_to_form(login_form, username_field)
    ui.add_to_form(login_form, password_field)
    ui.add_to_form(login_form, remember_field)
    ui.add_to_form(login_form, login_button)
    ui.add_to_form(login_form, forgot_password_button)

    io.println("‚úÖ Login form created with validation")
    io.println("üìã Login components:")
    io.println("  - Username field (required, min 3 chars)")
    io.println("  - Password field (required, min 6 chars)")
    io.println("  - Remember me option")
    io.println("  - Login button")
    io.println("  - Forgot password link")

    logging.info(logger, "Login form created successfully")
    logging.end_timer(timer)

# Create data entry form
define function create_data_entry_form that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "data_entry_form")

    io.println("\nüìã Data Entry Form Demo:")
    io.println("‚îÄ" * 40)

    # Create data entry form
    create data_form as Form
    set data_form to ui.create_form("Data Entry", 600, 400)

    # Personal information
    create first_name_field as TextField
    set first_name_field to ui.create_text_field("First Name")
    ui.add_validation_rule(first_name_field, "required", "First name is required")

    create last_name_field as TextField
    set last_name_field to ui.create_text_field("Last Name")
    ui.add_validation_rule(last_name_field, "required", "Last name is required")

    create age_field as TextField
    set age_field to ui.create_text_field("Age")
    ui.add_validation_rule(age_field, "required", "Age is required")
    ui.add_validation_rule(age_field, "numeric", "Age must be a number")
    ui.add_validation_rule(age_field, "range", "Age must be between 13-120")

    # Contact information
    create email_field as TextField
    set email_field to ui.create_text_field("Email Address")
    ui.add_validation_rule(email_field, "required", "Email is required")
    ui.add_validation_rule(email_field, "email", "Please enter a valid email")

    create phone_field as TextField
    set phone_field to ui.create_text_field("Phone Number")

    # Address information
    create address_field as TextField
    set address_field to ui.create_text_field("Street Address")

    create city_field as TextField
    set city_field to ui.create_text_field("City")

    create zip_field as TextField
    set zip_field to ui.create_text_field("ZIP Code")
    ui.add_validation_rule(zip_field, "pattern", "ZIP code must be 5 digits")

    # Buttons
    create save_button as Button
    set save_button to ui.create_button("Save Data", "handle_data_save")

    create clear_button as Button
    set clear_button to ui.create_button("Clear Form", "handle_data_clear")

    # Add all components to form
    ui.add_to_form(data_form, first_name_field)
    ui.add_to_form(data_form, last_name_field)
    ui.add_to_form(data_form, age_field)
    ui.add_to_form(data_form, email_field)
    ui.add_to_form(data_form, phone_field)
    ui.add_to_form(data_form, address_field)
    ui.add_to_form(data_form, city_field)
    ui.add_to_form(data_form, zip_field)
    ui.add_to_form(data_form, save_button)
    ui.add_to_form(data_form, clear_button)

    io.println("‚úÖ Data entry form created with comprehensive validation")
    io.println("üìã Form sections:")
    io.println("  - Personal Info: Name, Age")
    io.println("  - Contact: Email, Phone")
    io.println("  - Address: Street, City, ZIP")
    io.println("  - Actions: Save, Clear")

    logging.info(logger, "Data entry form created successfully")
    logging.end_timer(timer)

# Create message dialogs
define function create_message_dialogs that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "message_dialogs")

    io.println("\nüí¨ Message Dialogs Demo:")
    io.println("‚îÄ" * 40)

    # Info dialog
    ui.show_message_dialog("Information", "This is an information message.", "info")

    # Warning dialog
    ui.show_message_dialog("Warning", "This is a warning message.", "warning")

    # Error dialog
    ui.show_message_dialog("Error", "This is an error message.", "error")

    # Success dialog
    ui.show_message_dialog("Success", "Operation completed successfully!", "success")

    io.println("‚úÖ All message dialogs displayed")
    io.println("üìã Dialog types demonstrated:")
    io.println("  - Information dialogs")
    io.println("  - Warning dialogs")
    io.println("  - Error dialogs")
    io.println("  - Success dialogs")

    logging.info(logger, "Message dialogs demonstrated")
    logging.end_timer(timer)

# Create progress indicators
define function create_progress_indicators that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "progress_indicators")

    io.println("\nüìä Progress Indicators Demo:")
    io.println("‚îÄ" * 40)

    # Simulate progress for different operations
    io.println("üîÑ Starting file copy operation...")

    # Simulate progress (1-100%)
    create progress as Integer
    for progress from 1 to 100:
        if progress % 10 == 0:
            io.print("Progress: " + progress + "% ")
            if progress % 30 == 0:
                io.println("")

    io.println("\n‚úÖ File copy completed!")

    io.println("\nüîÑ Starting data processing...")
    for progress from 1 to 50:
        if progress % 5 == 0:
            io.print("Processing: " + progress * 2 + "% ")

    io.println("\n‚úÖ Data processing completed!")

    io.println("\nüìã Progress indicators demonstrated:")
    io.println("  - File operations progress")
    io.println("  - Data processing progress")
    io.println("  - Percentage completion")
    io.println("  - Status messages")

    logging.info(logger, "Progress indicators demonstrated")
    logging.end_timer(timer)

# Form validation demo
define function form_validation_demo that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "form_validation")

    io.println("\n‚úÖ Form Validation Demo:")
    io.println("‚îÄ" * 40)

    # Test various validation rules
    io.println("Testing validation rules:")

    # Required field validation
    create test_field as TextField
    set test_field to ui.create_text_field("Test field")
    ui.add_validation_rule(test_field, "required", "This field is required")

    # Email validation
    create email_test_field as TextField
    set email_test_field to ui.create_text_field("test@example.com")
    ui.add_validation_rule(email_test_field, "email", "Must be a valid email")

    # Numeric validation
    create number_field as TextField
    set number_field to ui.create_text_field("123")
    ui.add_validation_rule(number_field, "numeric", "Must be a number")

    # Length validation
    create length_field as TextField
    set length_field to ui.create_text_field("Hello")
    ui.add_validation_rule(length_field, "min_length", "Must be at least 3 characters")
    ui.add_validation_rule(length_field, "max_length", "Must be no more than 10 characters")

    # Pattern validation
    create pattern_field as TextField
    set pattern_field to ui.create_text_field("ABC123")
    ui.add_validation_rule(pattern_field, "pattern", "Must contain letters and numbers")

    io.println("‚úÖ Validation rules tested:")
    io.println("  - Required field validation")
    io.println("  - Email format validation")
    io.println("  - Numeric input validation")
    io.println("  - Length constraints")
    io.println("  - Pattern matching")
    io.println("  - Boolean value validation")
    io.println("  - Range validation")

    logging.info(logger, "Form validation demo completed")
    logging.end_timer(timer)

# Export form data to JSON
define function export_form_data_to_json that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "export_form_data")

    io.println("\nüì§ Export Form Data to JSON:")
    io.println("‚îÄ" * 40)

    # Create sample form data
    create form_data as Object
    set form_data["form_name"] to "Contact Form"
    set form_data["exported_at"] to "current_timestamp"
    set form_data["version"] to "1.0"

    create fields as Object
    set fields["name"] to "John Doe"
    set fields["email"] to "john@example.com"
    set fields["phone"] to "+1-555-0123"
    set fields["message"] to "This is a test message"
    set form_data["fields"] to fields

    create validation_rules as Object
    set validation_rules["name"] to "required,min_length"
    set validation_rules["email"] to "required,email"
    set validation_rules["phone"] to "optional"
    set validation_rules["message"] to "optional"
    set form_data["validation_rules"] to validation_rules

    # Convert to JSON
    create json_content as String
    set json_content to json.stringify(form_data, 2)

    io.println("‚úÖ Form data exported to JSON")
    io.println("üìÑ Sample JSON structure:")
    io.println(json_content)

    logging.info(logger, "Form data exported to JSON successfully")
    logging.end_timer(timer)

# Import form data from JSON
define function import_form_data_from_json that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "import_form_data")

    io.println("\nüì• Import Form Data from JSON:")
    io.println("‚îÄ" * 40)

    # Sample JSON data
    create sample_json as String
    set sample_json to '{"form_name": "User Registration", "fields": {"username": "johndoe", "email": "john@example.com", "age": 30}, "validation_rules": {"username": "required", "email": "required,email", "age": "required,numeric"}}'

    # Parse JSON
    create imported_data as Object
    set imported_data to json.parse(sample_json)

    io.println("‚úÖ JSON data imported successfully")
    io.println("üìã Imported form structure:")
    io.println("  Form Name: " + imported_data["form_name"])
    io.println("  Fields: " + imported_data["fields"])
    io.println("  Validation Rules: " + imported_data["validation_rules"])

    logging.info(logger, "Form data imported from JSON successfully")
    logging.end_timer(timer)

# UI Component showcase
define function ui_component_showcase that takes logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "ui_showcase")

    io.println("\nüé® UI Components Showcase:")
    io.println("‚îÄ" * 40)

    io.println("üìã Available UI Components:")
    io.println("  ‚úì Text Fields - Single line input")
    io.println("  ‚úì Text Areas - Multi-line input")
    io.println("  ‚úì Buttons - Clickable actions")
    io.println("  ‚úì Checkboxes - Boolean selections")
    io.println("  ‚úì Radio Buttons - Single selections")
    io.println("  ‚úì Dropdown Lists - Option selections")
    io.println("  ‚úì Date Pickers - Date input")
    io.println("  ‚úì Number Spinners - Numeric input")
    io.println("  ‚úì Progress Bars - Operation progress")
    io.println("  ‚úì Message Dialogs - User notifications")

    io.println("\nüéØ Form Validation Features:")
    io.println("  ‚úì Required field validation")
    io.println("  ‚úì Email format validation")
    io.println("  ‚úì Numeric input validation")
    io.println("  ‚úì Length constraints")
    io.println("  ‚úì Pattern matching")
    io.println("  ‚úì Range validation")
    io.println("  ‚úì Custom validation rules")

    io.println("\nüìä Form Management:")
    io.println("  ‚úì Form creation and configuration")
    io.println("  ‚úì Component organization")
    io.println("  ‚úì Data collection and processing")
    io.println("  ‚úì JSON import/export")
    io.println("  ‚úì Form state management")

    logging.info(logger, "UI components showcase completed")
    logging.end_timer(timer)

# Initialize the application
main()