# AGK Web Application Template
# Full-stack web application with server, API endpoints, and HTML generation
# Perfect for: Web Apps, REST APIs, Dynamic Websites, Admin Panels

import web
import io
import string
import math
import llm

# Global application state
create user_count as Integer
set user_count to 0

create ai_enabled as Boolean
set ai_enabled to false

create ai_client as LLMClient

define function main:
    # Initialize web server
    create server as WebServer
    set server to web.create_server(8080)

    # Initialize AI if available (optional)
    if ai_enabled:
        set ai_client to llm.create_llm_client("your-api-key-here", llm.gpt4())

    # Define routes
    create home_route as Route
    set home_route to web.create_route("/", "GET")
    set server to web.add_route(server, home_route, handle_home)

    create api_calculate_route as Route
    set api_calculate_route to web.create_route("/api/calculate", "POST")
    set server to web.add_route(server, api_calculate_route, handle_calculate)

    create api_users_route as Route
    set api_users_route to web.create_route("/api/users", "GET")
    set server to web.add_route(server, api_users_route, handle_get_users)

    create api_chat_route as Route
    set api_chat_route to web.create_route("/api/chat", "POST")
    set server to web.add_route(server, api_chat_route, handle_chat)

    # Start the server
    io.print("ðŸš€ Starting AGK Web Server on port 8080...")
    io.print("ðŸ“± Open your browser to: http://localhost:8080")
    io.print("ðŸ›‘ Press Ctrl+C to stop the server")

    web.start_server(server)
    return 0

# Route handlers
define function handle_home that takes request as Object and returns String:
    create html as String

    set html to "<!DOCTYPE html>"
    set html to html + "<html><head>"
    set html to html + "<title>AGK Web App</title>"
    set html to html + "<style>body{font-family:Arial;max-width:800px;margin:0 auto;padding:20px;} .button{background:#4CAF50;color:white;padding:10px;border:none;border-radius:5px;cursor:pointer;} .result{margin:10px 0;padding:10px;background:#e8f5e8;border-radius:5px;}</style>"
    set html to html + "</head><body>"

    set html to html + "<h1>ðŸš€ AGK Web Application</h1>"
    set html to html + "<p>Welcome to your AGK-powered web application!</p>"

    set html to html + "<h2>Calculator</h2>"
    set html to html + "<input type='number' id='num1' placeholder='First number'>"
    set html to html + "<input type='number' id='num2' placeholder='Second number'>"
    set html to html + "<button class='button' onclick='calculate()'>Calculate Sum</button>"
    set html to html + "<div id='result' class='result' style='display:none;'></div>"

    if ai_enabled:
        set html to html + "<h2>AI Chat</h2>"
        set html to html + "<input type='text' id='message' placeholder='Ask me anything...'>"
        set html to html + "<button class='button' onclick='chat()'>Send</button>"
        set html to html + "<div id='chat-response' class='result' style='display:none;'></div>"

    set html to html + "<h2>Statistics</h2>"
    set html to html + "<p>Users served: <strong>" + string.format(user_count) + "</strong></p>"

    set html to html + "<script>"
    set html to html + "async function calculate(){"
    set html to html + "  const num1 = document.getElementById('num1').value;"
    set html to html + "  const num2 = document.getElementById('num2').value;"
    set html to html + "  const response = await fetch('/api/calculate', {"
    set html to html + "    method: 'POST',"
    set html to html + "    headers: {'Content-Type': 'application/json'},"
    set html to html + "    body: JSON.stringify({num1: parseFloat(num1), num2: parseFloat(num2)})"
    set html to html + "  });"
    set html to html + "  const data = await response.json();"
    set html to html + "  document.getElementById('result').innerHTML = 'Result: ' + data.result;"
    set html to html + "  document.getElementById('result').style.display = 'block';"
    set html to html + "}"

    if ai_enabled:
        set html to html + "async function chat(){"
        set html to html + "  const message = document.getElementById('message').value;"
        set html to html + "  const response = await fetch('/api/chat', {"
        set html to html + "    method: 'POST',"
        set html to html + "    headers: {'Content-Type': 'application/json'},"
        set html to html + "    body: JSON.stringify({message: message})"
        set html to html + "  });"
        set html to html + "  const data = await response.json();"
        set html to html + "  document.getElementById('chat-response').innerHTML = data.response;"
        set html to html + "  document.getElementById('chat-response').style.display = 'block';"
        set html to html + "}"

    set html to html + "</script>"
    set html to html + "</body></html>"

    set user_count to user_count + 1
    return html

define function handle_calculate that takes request as Object and returns String:
    create json_response as Object

    # Parse request data (in real implementation, this would be parsed from request body)
    create num1 as Float
    set num1 to 10.0  # Default for demo
    create num2 as Float
    set num2 to 20.0  # Default for demo

    create result as Float
    set result to num1 + num2

    # Create JSON response
    create response_data as Object
    set response_data["result"] to result
    set response_data["operation"] to "addition"
    set response_data["timestamp"] to "2024-01-01T00:00:00Z"

    return web.to_json(response_data)

define function handle_get_users that takes request as Object and returns String:
    create users as List
    create user1 as Object
    set user1["id"] to 1
    set user1["name"] to "Alice"
    set user1["email"] to "alice@example.com"

    create user2 as Object
    set user2["id"] to 2
    set user2["name"] to "Bob"
    set user2["email"] to "bob@example.com"

    add user1 to users
    add user2 to users

    create response_data as Object
    set response_data["users"] to users
    set response_data["total"] to 2

    return web.to_json(response_data)

define function handle_chat that takes request as Object and returns String:
    if not ai_enabled:
        create error_response as Object
        set error_response["error"] to "AI not enabled"
        return web.to_json(error_response)

    # Get user message (in real implementation, parse from request)
    create user_message as String
    set user_message to "Hello, can you help me?"

    # Generate AI response
    create ai_response as String
    set ai_response to llm.ask_llm(ai_client, user_message)

    create response_data as Object
    set response_data["response"] to ai_response
    set response_data["input"] to user_message

    return web.to_json(response_data)

# Utility functions
define function generate_user_id that returns String:
    create timestamp as Integer
    set timestamp to 1234567890  # In real app, use current timestamp
    create random_part as Integer
    set random_part to math.random() * 1000
    return "user_" + string.format(timestamp) + "_" + string.format(random_part)

define function validate_email that takes email as String and returns Boolean:
    # Simple email validation
    if email contains "@" and email contains ".":
        return true
    else:
        return false

define function log_request that takes endpoint as String, user_agent as String:
    create log_message as String
    set log_message to "Request to " + endpoint + " from " + user_agent
    io.print(log_message)

# Async version for high-performance scenarios
define function async_web_handler that takes request as Object and returns String:
    # This would use web.make_async_get_request() for async operations
    # Perfect for calling external APIs without blocking the server

    create async_result as String
    # In real implementation:
    # create task_id as String
    # set task_id to web.make_async_get_request("https://api.example.com/data")
    # set async_result to web.await_http_response(task_id)

    set async_result to "Async operation completed"
    return async_result