# AGK HTTP Template - REST API Client Application
# This template demonstrates HTTP client operations and REST API integration
# Perfect for: API clients, web scrapers, data synchronization, microservices

import http
import io
import logging
import json

# Global configuration
define constant BASE_URL as String = "https://jsonplaceholder.typicode.com"
define constant TIMEOUT_SECONDS as Float = 30.0

# Main application entry point
define function main:
    # Initialize logging for the HTTP application
    create logger as Logger
    set logger to logging.get_logger("HTTP_Client")
    logging.set_level(logger, logging.INFO)
    logging.add_console_handler(logger)

    logging.info(logger, "Starting HTTP Client Application")

    # Run the main application loop
    run_http_application_loop(logger)

# Main application loop with menu-driven interface
define function run_http_application_loop that takes logger as Logger:
    create running as Boolean
    set running to true

    # Initialize HTTP client
    create client as HttpClient
    set client to initialize_http_client(logger)

    while running:
        io.println("\nüåê HTTP Client - REST API Operations")
        io.println("1. GET Request - Fetch Users")
        io.println("2. GET Request - Fetch Posts")
        io.println("3. POST Request - Create New Post")
        io.println("4. PUT Request - Update Post")
        io.println("5. PATCH Request - Partial Update")
        io.println("6. DELETE Request - Delete Post")
        io.println("7. Custom API Request")
        io.println("8. View Response Headers")
        io.println("9. Test Error Handling")
        io.println("10. Performance Test")
        io.println("11. Exit")
        io.print("Enter your choice (1-11): ")

        create choice as String
        set choice to io.read_line()

        if choice == "1":
            get_users(client, logger)
        else if choice == "2":
            get_posts(client, logger)
        else if choice == "3":
            create_post(client, logger)
        else if choice == "4":
            update_post(client, logger)
        else if choice == "5":
            patch_post(client, logger)
        else if choice == "6":
            delete_post(client, logger)
        else if choice == "7":
            custom_request(client, logger)
        else if choice == "8":
            view_headers(client, logger)
        else if choice == "9":
            test_error_handling(client, logger)
        else if choice == "10":
            performance_test(client, logger)
        else if choice == "11":
            set running to false
            http.close_client(client)
            logging.info(logger, "HTTP client closed. Application shutting down")
        else:
            io.println("‚ùå Invalid choice. Please try again.")

# Initialize HTTP client with configuration
define function initialize_http_client that takes logger as Logger and returns HttpClient:
    create timer as Timer
    set timer to logging.start_timer(logger, "http_client_initialization")

    create client as HttpClient
    set client to http.create_client()

    # Configure client settings
    http.set_timeout(client, TIMEOUT_SECONDS)
    http.set_user_agent(client, "AGK_HTTP_Client/1.0")
    http.set_follow_redirects(client, true)

    logging.end_timer(timer)
    logging.info(logger, "HTTP client initialized with timeout: " + TIMEOUT_SECONDS + "s")

    return client

# GET request to fetch users
define function get_users that takes client as HttpClient, logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "get_users")

    create url as String
    set url to BASE_URL + "/users"

    create response as HttpResponse
    set response to http.get(client, url)

    logging.end_timer(timer)

    io.println("\nüë• GET Users Response:")
    io.println("‚îÄ" * 40)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)

        io.println("‚úÖ Request successful!")
        io.println("üìÑ Response data:")
        create json_text as String
        set json_text to json.stringify(data, 2)
        io.println(json_text)

        logging.info(logger, "Successfully fetched users from API")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Failed to fetch users: " + error_text)

# GET request to fetch posts
define function get_posts that takes client as HttpClient, logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "get_posts")

    create url as String
    set url to BASE_URL + "/posts"

    create response as HttpResponse
    set response to http.get(client, url)

    logging.end_timer(timer)

    io.println("\nüìù GET Posts Response:")
    io.println("‚îÄ" * 40)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)

        io.println("‚úÖ Request successful!")
        io.println("üìä Total posts retrieved: (count from response)")

        logging.info(logger, "Successfully fetched posts from API")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Failed to fetch posts: " + error_text)

# POST request to create a new post
define function create_post that takes client as HttpClient, logger as Logger:
    io.println("\nüìù Create New Post:")
    io.print("Enter post title: ")
    create title as String
    set title to io.read_line()

    io.print("Enter post body: ")
    create body as String
    set body to io.read_line()

    io.print("Enter user ID: ")
    create user_id as String
    set user_id to io.read_line()

    create timer as Timer
    set timer to logging.start_timer(logger, "create_post")

    create url as String
    set url to BASE_URL + "/posts"

    create post_data as Object
    set post_data["title"] to title
    set post_data["body"] to body
    set post_data["userId"] to user_id

    create response as HttpResponse
    set response to http.post_json(client, url, post_data)

    logging.end_timer(timer)

    io.println("\nüì§ POST Response:")
    io.println("‚îÄ" * 30)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)

        io.println("‚úÖ Post created successfully!")
        create json_text as String
        set json_text to json.stringify(data, 2)
        io.println("üìÑ Created post:")
        io.println(json_text)

        logging.info(logger, "Successfully created new post")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Failed to create post: " + error_text)

# PUT request to update a post
define function update_post that takes client as HttpClient, logger as Logger:
    io.print("Enter post ID to update: ")
    create post_id as String
    set post_id to io.read_line()

    io.print("Enter new title: ")
    create title as String
    set title to io.read_line()

    io.print("Enter new body: ")
    create body as String
    set body to io.read_line()

    create timer as Timer
    set timer to logging.start_timer(logger, "update_post")

    create url as String
    set url to BASE_URL + "/posts/" + post_id

    create update_data as Object
    set update_data["id"] to post_id
    set update_data["title"] to title
    set update_data["body"] to body
    set update_data["userId"] to 1

    create response as HttpResponse
    set response to http.put_json(client, url, update_data)

    logging.end_timer(timer)

    io.println("\nüîÑ PUT Response:")
    io.println("‚îÄ" * 30)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)
        io.println("‚úÖ Post updated successfully!")
        logging.info(logger, "Successfully updated post " + post_id)
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Failed to update post " + post_id + ": " + error_text)

# PATCH request for partial update
define function patch_post that takes client as HttpClient, logger as Logger:
    io.print("Enter post ID to patch: ")
    create post_id as String
    set post_id to io.read_line()

    io.print("Enter new title: ")
    create title as String
    set title to io.read_line()

    create timer as Timer
    set timer to logging.start_timer(logger, "patch_post")

    create url as String
    set url to BASE_URL + "/posts/" + post_id

    create patch_data as Object
    set patch_data["title"] to title

    create response as HttpResponse
    set response to http.patch_json(client, url, patch_data)

    logging.end_timer(timer)

    io.println("\nüîß PATCH Response:")
    io.println("‚îÄ" * 30)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)
        io.println("‚úÖ Post patched successfully!")
        logging.info(logger, "Successfully patched post " + post_id)
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Failed to patch post " + post_id + ": " + error_text)

# DELETE request to delete a post
define function delete_post that takes client as HttpClient, logger as Logger:
    io.print("Enter post ID to delete: ")
    create post_id as String
    set post_id to io.read_line()

    io.print("‚ö†Ô∏è Are you sure you want to delete post " + post_id + "? (y/n): ")
    create confirmation as String
    set confirmation to io.read_line()

    if confirmation == "y":
        create timer as Timer
        set timer to logging.start_timer(logger, "delete_post")

        create url as String
        set url to BASE_URL + "/posts/" + post_id

        create response as HttpResponse
        set response to http.delete(client, url)

        logging.end_timer(timer)

        io.println("\nüóëÔ∏è DELETE Response:")
        io.println("‚îÄ" * 30)

        if http.is_success(response):
            io.println("‚úÖ Post deleted successfully!")
            logging.info(logger, "Successfully deleted post " + post_id)
        else:
            create error_text as String
            set error_text to http.get_response_text(response)
            io.println("‚ùå Request failed: " + error_text)
            logging.error(logger, "Failed to delete post " + post_id + ": " + error_text)
    else:
        io.println("‚ÑπÔ∏è Delete operation cancelled")

# Custom API request
define function custom_request that takes client as HttpClient, logger as Logger:
    io.print("Enter HTTP method (GET/POST/PUT/PATCH/DELETE): ")
    create method as String
    set method to io.read_line()

    io.print("Enter URL: ")
    create url as String
    set url to io.read_line()

    io.print("Enter request body (JSON) or press Enter for none: ")
    create body as String
    set body to io.read_line()

    create timer as Timer
    set timer to logging.start_timer(logger, "custom_request")

    create response as HttpResponse

    if body != "":
        create json_data as Object
        set json_data to json.parse(body)

        if method == "POST":
            set response to http.post_json(client, url, json_data)
        else if method == "PUT":
            set response to http.put_json(client, url, json_data)
        else if method == "PATCH":
            set response to http.patch_json(client, url, json_data)
        else:
            set response to http.get(client, url)
    else:
        if method == "DELETE":
            set response to http.delete(client, url)
        else:
            set response to http.get(client, url)

    logging.end_timer(timer)

    io.println("\nüîß Custom Request Response:")
    io.println("‚îÄ" * 40)

    if http.is_success(response):
        create data as Object
        set data to http.get_json(response)
        io.println("‚úÖ Request successful!")
        create json_text as String
        set json_text to json.stringify(data, 2)
        io.println(json_text)
        logging.info(logger, "Custom " + method + " request successful")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)
        logging.error(logger, "Custom " + method + " request failed: " + error_text)

# View response headers
define function view_headers that takes client as HttpClient, logger as Logger:
    create timer as Timer
    set timer to logging.start_timer(logger, "get_headers")

    create url as String
    set url to BASE_URL + "/posts/1"

    create response as HttpResponse
    set response to http.get(client, url)

    logging.end_timer(timer)

    io.println("\nüìã Response Headers:")
    io.println("‚îÄ" * 30)

    if http.is_success(response):
        # In real implementation, you'd access headers from response
        io.println("Content-Type: application/json")
        io.println("Cache-Control: max-age=43200")
        io.println("Connection: keep-alive")
        io.println("‚úÖ Headers retrieved successfully!")
        logging.info(logger, "Response headers displayed")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚ùå Request failed: " + error_text)

# Test error handling
define function test_error_handling that takes client as HttpClient, logger as Logger:
    io.println("\nüîß Testing Error Handling:")

    create timer as Timer
    set timer to logging.start_timer(logger, "error_handling_test")

    # Test with invalid URL
    create invalid_url as String
    set invalid_url to "https://invalid-api-endpoint-12345.com/test"

    create response as HttpResponse
    set response to http.get(client, invalid_url)

    logging.end_timer(timer)

    io.println("‚îÄ" * 40)

    if http.is_success(response):
        io.println("‚úÖ Unexpected success (might be a cached response)")
    else:
        create error_text as String
        set error_text to http.get_response_text(response)
        io.println("‚úÖ Error handling working correctly!")
        io.println("‚ùå Expected error: " + error_text)
        logging.info(logger, "Error handling test completed - working as expected")

# Performance test
define function performance_test that takes client as HttpClient, logger as Logger:
    io.print("Enter number of requests for performance test: ")
    create num_requests as String
    set num_requests to io.read_line()

    if num_requests == "":
        set num_requests to "5"

    create requests_count as Integer
    # In real implementation: set requests_count to string_to_integer(num_requests)
    set requests_count to 5

    io.println("\n‚ö° Performance Test - " + requests_count + " requests:")
    io.println("‚îÄ" * 50)

    create start_time as Float
    # start_time = get_current_time()

    create successful_requests as Integer
    set successful_requests to 0

    create i as Integer
    for i from 1 to requests_count:
        create url as String
        set url to BASE_URL + "/posts/" + i

        create response as HttpResponse
        set response to http.get(client, url)

        if http.is_success(response):
            set successful_requests to successful_requests + 1
        io.print(".")

    create end_time as Float
    # end_time = get_current_time()
    create total_time as Float
    # total_time = end_time - start_time

    io.println("\nüìä Performance Results:")
    io.println("‚îÄ" * 30)
    io.println("Total Requests: " + requests_count)
    io.println("Successful: " + successful_requests)
    io.println("Failed: " + (requests_count - successful_requests))
    io.println("Success Rate: " + ((successful_requests / requests_count) * 100) + "%")
    # io.println("Total Time: " + total_time + " seconds")
    # io.println("Avg Time per Request: " + (total_time / requests_count) + " seconds")

    logging.info(logger, "Performance test completed: " + successful_requests + "/" + requests_count + " successful")

# Initialize the application
main()