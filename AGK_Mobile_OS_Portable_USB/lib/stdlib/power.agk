# AGK Power Management and Battery Optimization Library
# Provides power management and battery optimization features for mobile devices

# Power States
create constant POWER_STATE_ACTIVE as String = "active"
create constant POWER_STATE_IDLE as String = "idle"
create constant POWER_STATE_SLEEP as String = "sleep"
create constant POWER_STATE_HIBERNATE as String = "hibernate"

# Performance Profiles
create constant PERF_PROFILE_HIGH_PERFORMANCE as String = "high_performance"
create constant PERF_PROFILE_BALANCED as String = "balanced"
create constant PERF_PROFILE_POWER_SAVER as String = "power_saver"
create constant PERF_PROFILE_ULTRA_LOW as String = "ultra_low"

# Wake Lock Types
create constant WAKE_LOCK_SCREEN as String = "screen"
create constant WAKE_LOCK_CPU as String = "cpu"
create constant WAKE_LOCK_WIFI as String = "wifi"
create constant WAKE_LOCK_FULL as String = "full"

# Power Management
define function get_power_state() as String:
    """Get current power state of the device"""
    external function power_get_device_state() from "power.so" as String
    return power_get_device_state()

define function set_performance_profile(profile as String) as void:
    """Set device performance profile"""
    external function power_set_performance_profile(p as String) from "power.so" as void
    power_set_performance_profile(profile)

define function get_performance_profile() as String:
    """Get current performance profile"""
    external function power_get_performance_profile() from "power.so" as String
    return power_get_performance_profile()

define function request_wake_lock(lock_type as String) as Integer:
    """Request a wake lock and return lock ID"""
    external function power_request_wake_lock(type as String) from "power.so" as Integer
    return power_request_wake_lock(lock_type)

define function release_wake_lock(lock_id as Integer) as void:
    """Release a wake lock by ID"""
    external function power_release_wake_lock(id as Integer) from "power.so" as void
    power_release_wake_lock(lock_id)

define function is_screen_on() as Boolean:
    """Check if screen is currently on"""
    external function power_is_screen_on() from "power.so" as Boolean
    return power_is_screen_on()

define function set_screen_timeout(timeout_ms as Integer) as void:
    """Set screen timeout in milliseconds"""
    external function power_set_screen_timeout(timeout as Integer) from "power.so" as void
    power_set_screen_timeout(timeout_ms)

define function get_screen_timeout() as Integer:
    """Get current screen timeout in milliseconds"""
    external function power_get_screen_timeout() from "power.so" as Integer
    return power_get_screen_timeout()

# Battery Management
define function get_battery_level() as Float:
    """Get battery level as percentage (0.0 to 1.0)"""
    external function battery_get_level() from "power.so" as Float
    return battery_get_level()

define function get_battery_health() as String:
    """Get battery health status"""
    external function battery_get_health() from "power.so" as String
    return battery_get_health()

define function get_battery_temperature() as Float:
    """Get battery temperature in Celsius"""
    external function battery_get_temperature() from "power.so" as Float
    return battery_get_temperature()

define function get_battery_voltage() as Float:
    """Get battery voltage in volts"""
    external function battery_get_voltage() from "power.so" as Float
    return battery_get_voltage()

define function get_battery_capacity() as Integer:
    """Get battery capacity in mAh"""
    external function battery_get_capacity() from "power.so" as Integer
    return battery_get_capacity()

define function is_battery_charging() as Boolean:
    """Check if battery is currently charging"""
    external function battery_is_charging() from "power.so" as Boolean
    return battery_is_charging()

define function get_charging_method() as String:
    """Get charging method (ac, usb, wireless, etc.)"""
    external function battery_get_charging_method() from "power.so" as String
    return battery_get_charging_method()

define function get_time_to_full_charge() as Integer:
    """Get estimated time to full charge in minutes"""
    external function battery_get_time_to_full() from "power.so" as Integer
    return battery_get_time_to_full()

define function get_time_to_empty() as Integer:
    """Get estimated time to empty in minutes"""
    external function battery_get_time_to_empty() from "power.so" as Integer
    return battery_get_time_to_empty()

# CPU Power Management
define function get_cpu_frequency() as Integer:
    """Get current CPU frequency in MHz"""
    external function cpu_get_frequency() from "power.so" as Integer
    return cpu_get_frequency()

define function set_cpu_frequency(freq_mhz as Integer) as void:
    """Set CPU frequency in MHz"""
    external function cpu_set_frequency(freq as Integer) from "power.so" as void
    cpu_set_frequency(freq_mhz)

define function get_cpu_core_count() as Integer:
    """Get number of active CPU cores"""
    external function cpu_get_core_count() from "power.so" as Integer
    return cpu_get_core_count()

define function set_cpu_core_count(cores as Integer) as void:
    """Set number of active CPU cores"""
    external function cpu_set_core_count(cores as Integer) from "power.so" as void
    cpu_set_core_count(cores)

define function get_cpu_usage() as Float:
    """Get current CPU usage percentage"""
    external function cpu_get_usage() from "power.so" as Float
    return cpu_get_usage()

define function get_cpu_temperature() as Float:
    """Get CPU temperature in Celsius"""
    external function cpu_get_temperature() from "power.so" as Float
    return cpu_get_temperature()

# GPU Power Management
define function get_gpu_frequency() as Integer:
    """Get current GPU frequency in MHz"""
    external function gpu_get_frequency() from "power.so" as Integer
    return gpu_get_frequency()

define function set_gpu_frequency(freq_mhz as Integer) as void:
    """Set GPU frequency in MHz"""
    external function gpu_set_frequency(freq as Integer) from "power.so" as void
    gpu_set_frequency(freq_mhz)

define function get_gpu_usage() as Float:
    """Get current GPU usage percentage"""
    external function gpu_get_usage() from "power.so" as Float
    return gpu_get_usage()

define function get_gpu_temperature() as Float:
    """Get GPU temperature in Celsius"""
    external function gpu_get_temperature() from "power.so" as Float
    return gpu_get_temperature()

# Memory Power Management
define function get_memory_usage() as Float:
    """Get current memory usage percentage"""
    external function memory_get_usage() from "power.so" as Float
    return memory_get_usage()

define function get_available_memory() as Integer:
    """Get available memory in bytes"""
    external function memory_get_available() from "power.so" as Integer
    return memory_get_available()

define function optimize_memory_usage() as void:
    """Trigger garbage collection and memory optimization"""
    external function memory_optimize() from "power.so" as void
    memory_optimize()

# Background Task Management
define function schedule_background_task that takes name as String, interval_ms as Integer, callback as Function and returns Integer:
    """Schedule a background task and return task ID"""
    external function bg_schedule_task(name as String, interval as Integer, cb as pointer) from "power.so" as Integer
    return bg_schedule_task(name, interval_ms, callback)

define function cancel_background_task(task_id as Integer) as void:
    """Cancel a background task by ID"""
    external function bg_cancel_task(id as Integer) from "power.so" as void
    bg_cancel_task(task_id)

define function pause_background_task(task_id as Integer) as void:
    """Pause a background task"""
    external function bg_pause_task(id as Integer) from "power.so" as void
    bg_pause_task(task_id)

define function resume_background_task(task_id as Integer) as void:
    """Resume a background task"""
    external function bg_resume_task(id as Integer) from "power.so" as void
    bg_resume_task(task_id)

# Doze Mode Detection
define function is_device_idle() as Boolean:
    """Check if device is in idle/doze mode"""
    external function device_is_idle() from "power.so" as Boolean
    return device_is_idle()

define function get_idle_time() as Integer:
    """Get device idle time in milliseconds"""
    external function device_get_idle_time() from "power.so" as Integer
    return device_get_idle_time()

define function set_idle_timeout(timeout_ms as Integer) as void:
    """Set idle timeout in milliseconds"""
    external function device_set_idle_timeout(timeout as Integer) from "power.so" as void
    device_set_idle_timeout(timeout_ms)

# Network Power Management
define function optimize_network_for_power() as void:
    """Optimize network settings for power saving"""
    external function network_power_optimize() from "power.so" as void
    network_power_optimize()

define function set_network_power_mode(mode as String) as void:
    """Set network power mode (high_performance, balanced, power_saver)"""
    external function network_set_power_mode(m as String) from "power.so" as void
    network_set_power_mode(mode)

# Sensor Power Management
define function enable_sensor_power_save(sensor_type as String) as void:
    """Enable power saving mode for a sensor"""
    external function sensor_enable_power_save(type as String) from "power.so" as void
    sensor_enable_power_save(sensor_type)

define function disable_sensor_power_save(sensor_type as String) as void:
    """Disable power saving mode for a sensor"""
    external function sensor_disable_power_save(type as String) from "power.so" as void
    sensor_disable_power_save(sensor_type)

# Power Usage Monitoring
define function get_app_power_usage() as Float:
    """Get current app power usage in mW"""
    external function power_get_app_usage() from "power.so" as Float
    return power_get_app_usage()

define function get_system_power_usage() as Float:
    """Get total system power usage in mW"""
    external function power_get_system_usage() from "power.so" as Float
    return power_get_system_usage()

define function start_power_monitoring() as Integer:
    """Start power monitoring and return session ID"""
    external function power_start_monitoring() from "power.so" as Integer
    return power_start_monitoring()

define function stop_power_monitoring(session_id as Integer) as void:
    """Stop power monitoring session"""
    external function power_stop_monitoring(id as Integer) from "power.so" as void
    power_stop_monitoring(session_id)

define function get_power_monitoring_data(session_id as Integer) as List:
    """Get power monitoring data for session"""
    external function power_get_monitoring_data(id as Integer) from "power.so" as pointer
    return power_get_monitoring_data(session_id)

# Thermal Management
define function get_device_temperature() as Float:
    """Get overall device temperature in Celsius"""
    external function thermal_get_device_temp() from "power.so" as Float
    return thermal_get_device_temp()

define function get_thermal_status() as String:
    """Get thermal status (normal, warm, hot, critical)"""
    external function thermal_get_status() from "power.so" as String
    return thermal_get_status()

define function set_thermal_throttling(enabled as Boolean) as void:
    """Enable or disable thermal throttling"""
    external function thermal_set_throttling(en as Boolean) from "power.so" as void
    thermal_set_throttling(enabled)

# Battery Optimization Tips
define function get_battery_optimization_tips() as List:
    """Get list of battery optimization tips"""
    create tips as List
    tips.append("Reduce screen brightness")
    tips.append("Disable unused sensors")
    tips.append("Use power saver mode")
    tips.append("Close background apps")
    tips.append("Disable push notifications")
    tips.append("Use WiFi instead of mobile data")
    tips.append("Lower app refresh rates")
    return tips

# Smart Charging
define function enable_smart_charging() as void:
    """Enable smart charging features"""
    external function battery_enable_smart_charging() from "power.so" as void
    battery_enable_smart_charging()

define function disable_smart_charging() as void:
    """Disable smart charging features"""
    external function battery_disable_smart_charging() from "power.so" as void
    battery_disable_smart_charging()

define function set_charging_limit(limit as Float) as void:
    """Set battery charging limit (0.0 to 1.0)"""
    external function battery_set_charging_limit(l as Float) from "power.so" as void
    battery_set_charging_limit(limit)

# Constants
create constant BATTERY_HEALTH_GOOD as String = "good"
create constant BATTERY_HEALTH_DEAD as String = "dead"
create constant BATTERY_HEALTH_OVERHEAT as String = "overheat"
create constant BATTERY_HEALTH_COLD as String = "cold"
create constant BATTERY_HEALTH_UNKNOWN as String = "unknown"

create constant CHARGING_METHOD_AC as String = "ac"
create constant CHARGING_METHOD_USB as String = "usb"
create constant CHARGING_METHOD_WIRELESS as String = "wireless"
create constant CHARGING_METHOD_UNKNOWN as String = "unknown"

create constant THERMAL_NORMAL as String = "normal"
create constant THERMAL_WARM as String = "warm"
create constant THERMAL_HOT as String = "hot"
create constant THERMAL_CRITICAL as String = "critical"