# AGK Hardware Access Library
# Provides low-level hardware access and interrupt handling

# CPU Register Access (x86)
define function read_register(register as String) as Integer:
    """Read CPU register value"""
    external function cpu_read_register(reg as String) from "hardware.so" as Integer
    return cpu_read_register(register)

define function write_register(register as String, value as Integer) as void:
    """Write CPU register value"""
    external function cpu_write_register(reg as String, val as Integer) from "hardware.so" as void
    cpu_write_register(register, value)

# Assembly Block Support
define function execute_assembly(code as String, input_operands as List, output_operands as List) as Integer:
    """Execute inline assembly code"""
    external function run_assembly(asm as String, inputs as pointer, outputs as pointer) from "hardware.so" as Integer
    return run_assembly(code, input_operands, output_operands)

# Port I/O (x86)
define function inb(port as Integer) as Integer:
    """Read byte from I/O port"""
    external function in_byte(port as Integer) from "hardware.so" as Integer
    return in_byte(port)

define function outb(port as Integer, value as Integer) as void:
    """Write byte to I/O port"""
    external function out_byte(port as Integer, val as Integer) from "hardware.so" as void
    out_byte(port, value)

define function inw(port as Integer) as Integer:
    """Read word from I/O port"""
    external function in_word(port as Integer) from "hardware.so" as Integer
    return in_word(port)

define function outw(port as Integer, value as Integer) as void:
    """Write word to I/O port"""
    external function out_word(port as Integer, val as Integer) from "hardware.so" as void
    out_word(port, value)

define function inl(port as Integer) as Integer:
    """Read long from I/O port"""
    external function in_long(port as Integer) from "hardware.so" as Integer
    return in_long(port)

define function outl(port as Integer, value as Integer) as void:
    """Write long to I/O port"""
    external function out_long(port as Integer, val as Integer) from "hardware.so" as void
    out_long(port, value)

# PCI Configuration Space Access
define function pci_config_read(bus as Integer, device as Integer, function as Integer, offset as Integer, size as Integer) as Integer:
    """Read from PCI configuration space"""
    external function read_pci_config(bus as Integer, dev as Integer, func as Integer, off as Integer, sz as Integer) from "hardware.so" as Integer
    return read_pci_config(bus, device, function, offset, size)

define function pci_config_write(bus as Integer, device as Integer, function as Integer, offset as Integer, size as Integer, value as Integer) as void:
    """Write to PCI configuration space"""
    external function write_pci_config(bus as Integer, dev as Integer, func as Integer, off as Integer, sz as Integer, val as Integer) from "hardware.so" as void
    write_pci_config(bus, device, function, offset, size, value)

# Memory Barriers and Synchronization
define function memory_barrier() as void:
    """Full memory barrier"""
    external function hardware_memory_barrier() from "hardware.so" as void
    hardware_memory_barrier()

define function read_barrier() as void:
    """Read memory barrier"""
    external function hardware_read_barrier() from "hardware.so" as void
    hardware_read_barrier()

define function write_barrier() as void:
    """Write memory barrier"""
    external function hardware_write_barrier() from "hardware.so" as void
    hardware_write_barrier()

define function atomic_increment(address as pointer) as Integer:
    """Atomic increment"""
    external function atomic_inc(addr as pointer) from "hardware.so" as Integer
    return atomic_inc(address)

define function atomic_decrement(address as pointer) as Integer:
    """Atomic decrement"""
    external function atomic_dec(addr as pointer) from "hardware.so" as Integer
    return atomic_dec(address)

define function atomic_exchange(address as pointer, value as Integer) as Integer:
    """Atomic exchange"""
    external function atomic_xchg(addr as pointer, val as Integer) from "hardware.so" as Integer
    return atomic_xchg(address, value)

define function atomic_compare_exchange(address as pointer, expected as Integer, desired as Integer) as Integer:
    """Atomic compare and exchange"""
    external function atomic_cmpxchg(addr as pointer, exp as Integer, des as Integer) from "hardware.so" as Integer
    return atomic_cmpxchg(address, expected, desired)

# CPUID Instruction
define function cpuid(leaf as Integer, subleaf as Integer) as List:
    """Execute CPUID instruction and return results"""
    external function execute_cpuid(leaf as Integer, subleaf as Integer) from "hardware.so" as pointer
    return execute_cpuid(leaf, subleaf)

# Model Specific Registers (MSRs)
define function read_msr(msr as Integer) as Integer:
    """Read Model Specific Register"""
    external function read_model_specific_register(msr as Integer) from "hardware.so" as Integer
    return read_model_specific_register(msr)

define function write_msr(msr as Integer, value as Integer) as void:
    """Write Model Specific Register"""
    external function write_model_specific_register(msr as Integer, val as Integer) from "hardware.so" as void
    write_model_specific_register(msr, value)

# CPU Feature Detection
define function has_sse() as Boolean:
    """Check for SSE support"""
    external function check_sse_support() from "hardware.so" as Boolean
    return check_sse_support()

define function has_sse2() as Boolean:
    """Check for SSE2 support"""
    external function check_sse2_support() from "hardware.so" as Boolean
    return check_sse2_support()

define function has_avx() as Boolean:
    """Check for AVX support"""
    external function check_avx_support() from "hardware.so" as Boolean
    return check_avx_support()

define function has_avx2() as Boolean:
    """Check for AVX2 support"""
    external function check_avx2_support() from "hardware.so" as Boolean
    return check_avx2_support()

define function has_rdrand() as Boolean:
    """Check for RDRAND support"""
    external function check_rdrand_support() from "hardware.so" as Boolean
    return check_rdrand_support()

define function has_aes() as Boolean:
    """Check for AES support"""
    external function check_aes_support() from "hardware.so" as Boolean
    return check_aes_support()

# Random Number Generation
define function generate_rdrand() as Integer:
    """Generate random number using RDRAND"""
    external function rdrand_generate() from "hardware.so" as Integer
    return rdrand_generate()

define function generate_rdseed() as Integer:
    """Generate random seed using RDSEED"""
    external function rdseed_generate() from "hardware.so" as Integer
    return rdseed_generate()

# CPU Information
define function get_cpu_vendor() as String:
    """Get CPU vendor string"""
    external function cpu_get_vendor() from "hardware.so" as String
    return cpu_get_vendor()

define function get_cpu_brand() as String:
    """Get CPU brand string"""
    external function cpu_get_brand() from "hardware.so" as String
    return cpu_get_brand()

define function get_cpu_cores() as Integer:
    """Get number of CPU cores"""
    external function cpu_get_cores() from "hardware.so" as Integer
    return cpu_get_cores()

define function get_cpu_threads() as Integer:
    """Get number of CPU threads"""
    external function cpu_get_threads() from "hardware.so" as Integer
    return cpu_get_threads()

define function get_cpu_frequency() as Integer:
    """Get CPU frequency in MHz"""
    external function cpu_get_frequency() from "hardware.so" as Integer
    return cpu_get_frequency()

# Interrupt Control
define function enable_interrupts() as void:
    """Enable interrupts (STI)"""
    external function interrupts_enable() from "hardware.so" as void
    interrupts_enable()

define function disable_interrupts() as void:
    """Disable interrupts (CLI)"""
    external function interrupts_disable() from "hardware.so" as void
    interrupts_disable()

define function halt_cpu() as void:
    """Halt CPU (HLT)"""
    external function cpu_halt() from "hardware.so" as void
    cpu_halt()

define function nop() as void:
    """No operation (NOP)"""
    external function cpu_nop() from "hardware.so" as void
    cpu_nop()

# Cache Control
define function cache_flush(address as pointer, size as Integer) as void:
    """Flush cache lines"""
    external function flush_cache(addr as pointer, sz as Integer) from "hardware.so" as void
    flush_cache(address, size)

define function cache_invalidate(address as pointer, size as Integer) as void:
    """Invalidate cache lines"""
    external function invalidate_cache(addr as pointer, sz as Integer) from "hardware.so" as void
    invalidate_cache(address, size)

define function cache_flush_all() as void:
    """Flush entire cache"""
    external function flush_all_cache() from "hardware.so" as void
    flush_all_cache()

# TLB Management
define function tlb_flush() as void:
    """Flush Translation Lookaside Buffer"""
    external function flush_tlb() from "hardware.so" as void
    flush_tlb()

define function tlb_flush_single(address as pointer) as void:
    """Flush single TLB entry"""
    external function flush_tlb_single(addr as pointer) from "hardware.so" as void
    flush_tlb_single(address)

# Performance Monitoring
define function read_tsc() as Integer:
    """Read Time Stamp Counter"""
    external function read_timestamp_counter() from "hardware.so" as Integer
    return read_timestamp_counter()

define function read_perf_counter(counter as Integer) as Integer:
    """Read performance counter"""
    external function read_performance_counter(cnt as Integer) from "hardware.so" as Integer
    return read_performance_counter(counter)

define function write_perf_counter(counter as Integer, value as Integer) as void:
    """Write performance counter"""
    external function write_performance_counter(cnt as Integer, val as Integer) from "hardware.so" as void
    write_performance_counter(counter, value)

# Hardware Constants
# CPU Registers (x86)
create constant REG_EAX as String = "eax"
create constant REG_EBX as String = "ebx"
create constant REG_ECX as String = "ecx"
create constant REG_EDX as String = "edx"
create constant REG_ESI as String = "esi"
create constant REG_EDI as String = "edi"
create constant REG_ESP as String = "esp"
create constant REG_EBP as String = "ebp"

# CPUID Leaves
create constant CPUID_VENDOR as Integer = 0x00000000
create constant CPUID_FEATURES as Integer = 0x00000001
create constant CPUID_CACHE as Integer = 0x00000002
create constant CPUID_SERIAL as Integer = 0x00000003
create constant CPUID_CACHE_EXTENDED as Integer = 0x00000004
create constant CPUID_MONITOR as Integer = 0x00000005
create constant CPUID_THERMAL as Integer = 0x00000006
create constant CPUID_EXTENDED as Integer = 0x80000000
create constant CPUID_BRAND1 as Integer = 0x80000002
create constant CPUID_BRAND2 as Integer = 0x80000003
create constant CPUID_BRAND3 as Integer = 0x80000004

# MSRs
create constant MSR_APIC_BASE as Integer = 0x0000001B
create constant MSR_EFER as Integer = 0xC0000080
create constant MSR_STAR as Integer = 0xC0000081
create constant MSR_LSTAR as Integer = 0xC0000082
create constant MSR_CSTAR as Integer = 0xC0000083
create constant MSR_SFMASK as Integer = 0xC0000084

# PCI Configuration Registers
create constant PCI_VENDOR_ID as Integer = 0x00
create constant PCI_DEVICE_ID as Integer = 0x02
create constant PCI_COMMAND as Integer = 0x04
create constant PCI_STATUS as Integer = 0x06
create constant PCI_REVISION as Integer = 0x08
create constant PCI_CLASS as Integer = 0x0A
create constant PCI_CACHE_LINE_SIZE as Integer = 0x0C
create constant PCI_LATENCY_TIMER as Integer = 0x0D
create constant PCI_HEADER_TYPE as Integer = 0x0E
create constant PCI_BIST as Integer = 0x0F
create constant PCI_BAR0 as Integer = 0x10
create constant PCI_BAR1 as Integer = 0x14
create constant PCI_BAR2 as Integer = 0x18
create constant PCI_BAR3 as Integer = 0x1C
create constant PCI_BAR4 as Integer = 0x20
create constant PCI_BAR5 as Integer = 0x24
create constant PCI_INTERRUPT_LINE as Integer = 0x3C
create constant PCI_INTERRUPT_PIN as Integer = 0x3D

# I/O Port Addresses
create constant PORT_PIC1_COMMAND as Integer = 0x20
create constant PORT_PIC1_DATA as Integer = 0x21
create constant PORT_PIC2_COMMAND as Integer = 0xA0
create constant PORT_PIC2_DATA as Integer = 0xA1
create constant PORT_KEYBOARD_DATA as Integer = 0x60
create constant PORT_KEYBOARD_STATUS as Integer = 0x64
create constant PORT_SERIAL_COM1 as Integer = 0x3F8
create constant PORT_SERIAL_COM2 as Integer = 0x2F8
create constant PORT_PARALLEL_LPT1 as Integer = 0x378
create constant PORT_CMOS_ADDRESS as Integer = 0x70
create constant PORT_CMOS_DATA as Integer = 0x71
create constant PORT_DMA_ADDRESS as Integer = 0x00
create constant PORT_DMA_COUNT as Integer = 0x01
create constant PORT_FLOPPY as Integer = 0x3F0

# Performance Counter Events
create constant PERF_INSTRUCTIONS_RETIRED as Integer = 0x00C0
create constant PERF_CACHE_MISSES as Integer = 0x412E
create constant PERF_BRANCH_MISSES as Integer = 0x00CB
create constant PERF_UNHALTED_CORE_CYCLES as Integer = 0x003C