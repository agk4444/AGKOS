# AGK List Library
# Provides list manipulation functions

define function create_list that returns List:
    create result as List
    set result to []
    return result

define function append that takes lst as List, item and returns List:
    add item to lst
    return lst

define function prepend that takes lst as List, item and returns List:
    create new_list as List
    set new_list to [item]

    for each existing_item in lst:
        add existing_item to new_list

    return new_list

define function length that takes lst as List and returns Integer:
    create count as Integer
    set count to 0

    for each item in lst:
        set count to count + 1

    return count

define function get_item that takes lst as List, index as Integer:
    create current_index as Integer
    set current_index to 0

    for each item in lst:
        if current_index is equal to index:
            return item
        set current_index to current_index + 1

    throw "Index out of bounds"

define function set_item that takes lst as List, index as Integer, value and returns List:
    create current_index as Integer
    set current_index to 0

    for each item in lst:
        if current_index is equal to index:
            # Note: In AGK, we can't directly modify list elements
            # This would need to be implemented differently in the generated Python
            throw "Direct list element modification not supported"
        set current_index to current_index + 1

    throw "Index out of bounds"

define function contains that takes lst as List, item and returns Boolean:
    for each list_item in lst:
        if list_item is equal to item:
            return true

    return false

define function find_index that takes lst as List, item and returns Integer:
    create current_index as Integer
    set current_index to 0

    for each list_item in lst:
        if list_item is equal to item:
            return current_index
        set current_index to current_index + 1

    return -1  # Not found

define function remove_item that takes lst as List, item and returns List:
    create result as List
    set result to []

    for each list_item in lst:
        if list_item is not equal to item:
            add list_item to result

    return result

define function remove_at that takes lst as List, index as Integer and returns List:
    create result as List
    set result to []

    create current_index as Integer
    set current_index to 0

    for each item in lst:
        if current_index is not equal to index:
            add item to result
        set current_index to current_index + 1

    return result

define function insert_at that takes lst as List, index as Integer, item and returns List:
    create result as List
    set result to []

    create current_index as Integer
    set current_index to 0

    create inserted as Boolean
    set inserted to false

    for each list_item in lst:
        if current_index is equal to index:
            add item to result
            set inserted to true

        add list_item to result
        set current_index to current_index + 1

    if not inserted:
        add item to result

    return result

define function reverse that takes lst as List and returns List:
    create result as List
    set result to []

    # Add items in reverse order
    for each i in range(length(lst) - 1, -1, -1):
        create item
        set item to get_item(lst, i)
        add item to result

    return result

define function sort that takes lst as List and returns List:
    # Simple bubble sort implementation
    create n as Integer
    set n to length(lst)

    for each i in range(n):
        for each j in range(0, n - i - 1):
            create item1
            set item1 to get_item(lst, j)
            create item2
            set item2 to get_item(lst, j + 1)

            # Simple comparison (works for numbers and strings)
            if item1 > item2:
                # Swap elements
                set lst to set_item(lst, j, item2)
                set lst to set_item(lst, j + 1, item1)

    return lst

define function slice that takes lst as List, start as Integer, end as Integer and returns List:
    create result as List
    set result to []

    create lst_len as Integer
    set lst_len to length(lst)

    # Handle negative indices
    if start is less than 0:
        set start to lst_len + start
    if end is less than 0:
        set end to lst_len + end

    # Ensure bounds
    if start is less than 0:
        set start to 0
    if end is greater than lst_len:
        set end to lst_len
    if start >= end:
        return result

    for each i in range(start, end):
        create item
        set item to get_item(lst, i)
        add item to result

    return result

define function range that takes start as Integer, end as Integer, step as Integer and returns List:
    create result as List
    set result to []

    create current as Integer
    set current to start

    if step is greater than 0:
        while current < end:
            add current to result
            set current to current + step
    else:
        while current > end:
            add current to result
            set current to current + step

    return result

define function range2 that takes start as Integer, end as Integer and returns List:
    return range(start, end, 1)

define function range1 that takes end as Integer and returns List:
    return range(0, end, 1)

define function map_list that takes lst as List, func and returns List:
    # Note: This would require first-class functions to work properly
    # For now, this is a placeholder implementation
    create result as List
    set result to []

    for each item in lst:
        # In a real implementation, this would call the function
        add item to result

    return result

define function filter_list that takes lst as List, condition and returns List:
    # Note: This would require first-class functions to work properly
    # For now, this is a placeholder implementation
    create result as List
    set result to []

    for each item in lst:
        # In a real implementation, this would check the condition
        add item to result

    return result