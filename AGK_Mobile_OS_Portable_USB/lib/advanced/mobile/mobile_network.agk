# AGK Mobile Networking and Communication Library
# Provides mobile-specific networking features and communication protocols

import http
import json
import string
import crypto

# Network Types and Constants
create constant NETWORK_TYPE_WIFI as String = "wifi"
create constant NETWORK_TYPE_CELLULAR as String = "cellular"
create constant NETWORK_TYPE_ETHERNET as String = "ethernet"
create constant NETWORK_TYPE_BLUETOOTH as String = "bluetooth"
create constant NETWORK_TYPE_NFC as String = "nfc"

create constant CELLULAR_TYPE_2G as String = "2g"
create constant CELLULAR_TYPE_3G as String = "3g"
create constant CELLULAR_TYPE_4G as String = "4g"
create constant CELLULAR_TYPE_5G as String = "5g"

# Connection States
create constant CONNECTION_STATE_DISCONNECTED as String = "disconnected"
create constant CONNECTION_STATE_CONNECTING as String = "connecting"
create constant CONNECTION_STATE_CONNECTED as String = "connected"
create constant CONNECTION_STATE_DISCONNECTING as String = "disconnecting"

# Network Interfaces
define function get_active_network_interfaces() as List:
    """Get list of active network interfaces"""
    external function network_get_interfaces() from "network.so" as pointer
    return network_get_interfaces()

define function get_network_interface_info(interface_name as String) as Object:
    """Get detailed information about a network interface"""
    external function network_get_interface_info(name as String) from "network.so" as pointer
    return network_get_interface_info(interface_name)

define function get_mobile_network_type() as String:
    """Get the current mobile network type"""
    external function network_get_mobile_type() from "network.so" as String
    return network_get_mobile_type()

define function get_cellular_network_info() as Object:
    """Get cellular network information"""
    external function network_get_cellular_info() from "network.so" as pointer
    return network_get_cellular_info()

# Network Monitoring
define function start_network_monitoring() as Integer:
    """Start network monitoring and return session ID"""
    external function network_start_monitoring() from "network.so" as Integer
    return network_start_monitoring()

define function stop_network_monitoring(session_id as Integer) as void:
    """Stop network monitoring session"""
    external function network_stop_monitoring(id as Integer) from "network.so" as void
    network_stop_monitoring(session_id)

define function get_network_monitoring_data(session_id as Integer) as List:
    """Get network monitoring data"""
    external function network_get_monitoring_data(id as Integer) from "network.so" as pointer
    return network_get_monitoring_data(session_id)

define function get_network_speed_test() as Object:
    """Perform network speed test"""
    external function network_speed_test() from "network.so" as pointer
    return network_speed_test()

# Data Usage
define function get_mobile_data_usage() as Object:
    """Get mobile data usage statistics"""
    external function network_get_data_usage() from "network.so" as pointer
    return network_get_data_usage()

define function reset_data_usage_counter() as void:
    """Reset data usage counter"""
    external function network_reset_data_counter() from "network.so" as void
    network_reset_data_counter()

define function set_data_usage_limit(limit_bytes as Integer) as void:
    """Set data usage limit"""
    external function network_set_data_limit(limit as Integer) from "network.so" as void
    network_set_data_limit(limit_bytes)

define function get_data_usage_warning() as Boolean:
    """Check if data usage warning should be shown"""
    external function network_get_data_warning() from "network.so" as Boolean
    return network_get_data_warning()

# WiFi Management
define function scan_wifi_networks() as List:
    """Scan for available WiFi networks"""
    external function wifi_scan_networks() from "network.so" as pointer
    return wifi_scan_networks()

define function connect_to_wifi(ssid as String, password as String) as Boolean:
    """Connect to WiFi network"""
    external function wifi_connect(ssid as String, pass as String) from "network.so" as Boolean
    return wifi_connect(ssid, password)

define function disconnect_from_wifi() as void:
    """Disconnect from current WiFi network"""
    external function wifi_disconnect() from "network.so" as void
    wifi_disconnect()

define function get_wifi_connection_info() as Object:
    """Get current WiFi connection information"""
    external function wifi_get_connection_info() from "network.so" as pointer
    return wifi_get_connection_info()

define function get_wifi_signal_strength() as Integer:
    """Get WiFi signal strength (0-100)"""
    external function wifi_get_signal_strength() from "network.so" as Integer
    return wifi_get_signal_strength()

# Bluetooth Management
define function enable_bluetooth() as Boolean:
    """Enable Bluetooth"""
    external function bluetooth_enable() from "network.so" as Boolean
    return bluetooth_enable()

define function disable_bluetooth() as void:
    """Disable Bluetooth"""
    external function bluetooth_disable() from "network.so" as void
    bluetooth_disable()

define function is_bluetooth_enabled() as Boolean:
    """Check if Bluetooth is enabled"""
    external function bluetooth_is_enabled() from "network.so" as Boolean
    return bluetooth_is_enabled()

define function scan_bluetooth_devices() as List:
    """Scan for Bluetooth devices"""
    external function bluetooth_scan_devices() from "network.so" as pointer
    return bluetooth_scan_devices()

define function pair_bluetooth_device(device_id as String) as Boolean:
    """Pair with Bluetooth device"""
    external function bluetooth_pair_device(id as String) from "network.so" as Boolean
    return bluetooth_pair_device(device_id)

define function connect_bluetooth_device(device_id as String) as Boolean:
    """Connect to Bluetooth device"""
    external function bluetooth_connect_device(id as String) from "network.so" as Boolean
    return bluetooth_connect_device(device_id)

define function disconnect_bluetooth_device(device_id as String) as void:
    """Disconnect from Bluetooth device"""
    external function bluetooth_disconnect_device(id as String) from "network.so" as void
    bluetooth_disconnect_device(device_id)

# NFC Communication
define function enable_nfc() as Boolean:
    """Enable NFC"""
    external function nfc_enable() from "network.so" as Boolean
    return nfc_enable()

define function disable_nfc() as void:
    """Disable NFC"""
    external function nfc_disable() from "network.so" as void
    nfc_disable()

define function is_nfc_enabled() as Boolean:
    """Check if NFC is enabled"""
    external function nfc_is_enabled() from "network.so" as Boolean
    return nfc_is_enabled()

define function start_nfc_discovery() as Integer:
    """Start NFC discovery and return session ID"""
    external function nfc_start_discovery() from "network.so" as Integer
    return nfc_start_discovery()

define function stop_nfc_discovery(session_id as Integer) as void:
    """Stop NFC discovery session"""
    external function nfc_stop_discovery(id as Integer) from "network.so" as void
    nfc_stop_discovery(session_id)

define function read_nfc_tag() as Object:
    """Read NFC tag data"""
    external function nfc_read_tag() from "network.so" as pointer
    return nfc_read_tag()

define function write_nfc_tag(data as String) as Boolean:
    """Write data to NFC tag"""
    external function nfc_write_tag(data as String) from "network.so" as Boolean
    return nfc_write_tag(data)

# Mobile Data Management
define function enable_mobile_data() as Boolean:
    """Enable mobile data"""
    external function mobile_data_enable() from "network.so" as Boolean
    return mobile_data_enable()

define function disable_mobile_data() as void:
    """Disable mobile data"""
    external function mobile_data_disable() from "network.so" as void
    mobile_data_disable()

define function is_mobile_data_enabled() as Boolean:
    """Check if mobile data is enabled"""
    external function mobile_data_is_enabled() from "network.so" as Boolean
    return mobile_data_is_enabled()

define function get_mobile_data_state() as String:
    """Get mobile data connection state"""
    external function mobile_data_get_state() from "network.so" as String
    return mobile_data_get_state()

# Network Security
define function create_secure_connection(host as String, port as Integer) as Integer:
    """Create secure network connection and return socket ID"""
    external function network_create_secure_connection(host as String, port as Integer) from "network.so" as Integer
    return network_create_secure_connection(host, port)

define function send_encrypted_data(socket_id as Integer, data as String) as Boolean:
    """Send encrypted data over network"""
    external function network_send_encrypted(id as Integer, data as String) from "network.so" as Boolean
    return network_send_encrypted(socket_id, data)

define function receive_encrypted_data(socket_id as Integer) as String:
    """Receive encrypted data from network"""
    external function network_receive_encrypted(id as Integer) from "network.so" as String
    return network_receive_encrypted(socket_id)

define function close_secure_connection(socket_id as Integer) as void:
    """Close secure network connection"""
    external function network_close_secure_connection(id as Integer) from "network.so" as void
    network_close_secure_connection(socket_id)

# VPN Management
define function connect_to_vpn(config as Object) as Boolean:
    """Connect to VPN using configuration"""
    external function vpn_connect(config as pointer) from "network.so" as Boolean
    return vpn_connect(config)

define function disconnect_from_vpn() as void:
    """Disconnect from VPN"""
    external function vpn_disconnect() from "network.so" as void
    vpn_disconnect()

define function get_vpn_connection_state() as String:
    """Get VPN connection state"""
    external function vpn_get_state() from "network.so" as String
    return vpn_get_state()

define function get_vpn_info() as Object:
    """Get VPN connection information"""
    external function vpn_get_info() from "network.so" as pointer
    return vpn_get_info()

# Network Diagnostics
define function ping_host(host as String) as Object:
    """Ping a host and return results"""
    external function network_ping(host as String) from "network.so" as pointer
    return network_ping(host)

define function traceroute_host(host as String) as List:
    """Perform traceroute to host"""
    external function network_traceroute(host as String) from "network.so" as pointer
    return network_traceroute(host)

define function get_dns_info(domain as String) as Object:
    """Get DNS information for domain"""
    external function network_get_dns_info(domain as String) from "network.so" as pointer
    return network_get_dns_info(domain)

# Network Preferences
define function set_network_preference(preference as String) as void:
    """Set network preference (wifi_only, cellular_only, any)"""
    external function network_set_preference(pref as String) from "network.so" as void
    network_set_preference(preference)

define function get_network_preference() as String:
    """Get current network preference"""
    external function network_get_preference() from "network.so" as String
    return network_get_preference()

define function set_data_roaming_enabled(enabled as Boolean) as void:
    """Enable or disable data roaming"""
    external function network_set_data_roaming(en as Boolean) from "network.so" as void
    network_set_data_roaming(enabled)

define function is_data_roaming_enabled() as Boolean:
    """Check if data roaming is enabled"""
    external function network_is_data_roaming_enabled() from "network.so" as Boolean
    return network_is_data_roaming_enabled()

# Network Events and Callbacks
define function set_network_callback(event_type as String, callback as Function) as void:
    """Set callback for network events"""
    external function network_set_callback(type as String, cb as pointer) from "network.so" as void
    network_set_callback(event_type, callback)

define function remove_network_callback(event_type as String) as void:
    """Remove network event callback"""
    external function network_remove_callback(type as String) from "network.so" as void
    network_remove_callback(event_type)

# Network Optimization
define function optimize_network_for_performance() as void:
    """Optimize network settings for performance"""
    external function network_optimize_performance() from "network.so" as void
    network_optimize_performance()

define function optimize_network_for_battery() as void:
    """Optimize network settings for battery life"""
    external function network_optimize_battery() from "network.so" as void
    network_optimize_battery()

define function set_network_timeout(timeout_ms as Integer) as void:
    """Set network operation timeout"""
    external function network_set_timeout(timeout as Integer) from "network.so" as void
    network_set_timeout(timeout_ms)

# Utility Functions
define function format_data_size(bytes as Integer) as String:
    """Format data size in human readable format"""
    if bytes < 1024:
        return string.format(bytes) + " B"
    else:
        if bytes < 1024 * 1024:
            return string.format(bytes / 1024.0) + " KB"
        else:
            if bytes < 1024 * 1024 * 1024:
                return string.format(bytes / (1024.0 * 1024.0)) + " MB"
            else:
                return string.format(bytes / (1024.0 * 1024.0 * 1024.0)) + " GB"

define function get_network_status_description(status as String) as String:
    """Get human readable network status description"""
    if status is equal to NETWORK_TYPE_WIFI:
        return "WiFi"
    else:
        if status is equal to NETWORK_TYPE_CELLULAR:
            return "Cellular Data"
        else:
            if status is equal to NETWORK_TYPE_ETHERNET:
                return "Ethernet"
            else:
                if status is equal to NETWORK_TYPE_BLUETOOTH:
                    return "Bluetooth"
                else:
                    if status is equal to NETWORK_TYPE_NFC:
                        return "NFC"
                    else:
                        return "Unknown"

# Constants for Events
create constant NETWORK_EVENT_CONNECTED as String = "network_connected"
create constant NETWORK_EVENT_DISCONNECTED as String = "network_disconnected"
create constant NETWORK_EVENT_WIFI_SCAN_COMPLETED as String = "wifi_scan_completed"
create constant NETWORK_EVENT_BLUETOOTH_DEVICE_FOUND as String = "bluetooth_device_found"
create constant NETWORK_EVENT_NFC_TAG_DISCOVERED as String = "nfc_tag_discovered"
create constant NETWORK_EVENT_DATA_LIMIT_REACHED as String = "data_limit_reached"
create constant NETWORK_EVENT_VPN_CONNECTED as String = "vpn_connected"
create constant NETWORK_EVENT_VPN_DISCONNECTED as String = "vpn_disconnected"