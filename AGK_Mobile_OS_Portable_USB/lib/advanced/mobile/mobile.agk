# AGK Mobile Hardware Access Library
# Provides mobile-specific hardware access and device management

# Device Information
define function get_device_model() as String:
    """Get device model"""
    external function mobile_get_device_model() from "mobile.so" as String
    return mobile_get_device_model()

define function get_device_manufacturer() as String:
    """Get device manufacturer"""
    external function mobile_get_device_manufacturer() from "mobile.so" as String
    return mobile_get_device_manufacturer()

define function get_os_version() as String:
    """Get OS version"""
    external function mobile_get_os_version() from "mobile.so" as String
    return mobile_get_os_version()

define function get_device_id() as String:
    """Get unique device ID"""
    external function mobile_get_device_id() from "mobile.so" as String
    return mobile_get_device_id()

define function get_screen_density() as Float:
    """Get screen density (pixels per inch)"""
    external function mobile_get_screen_density() from "mobile.so" as Float
    return mobile_get_screen_density()

define function get_screen_width_px() as Integer:
    """Get screen width in pixels"""
    external function mobile_get_screen_width() from "mobile.so" as Integer
    return mobile_get_screen_width()

define function get_screen_height_px() as Integer:
    """Get screen height in pixels"""
    external function mobile_get_screen_height() from "mobile.so" as Integer
    return mobile_get_screen_height()

# Battery Management
define function get_battery_level() as Float:
    """Get battery level (0.0 to 1.0)"""
    external function mobile_get_battery_level() from "mobile.so" as Float
    return mobile_get_battery_level()

define function is_battery_charging() as Boolean:
    """Check if battery is charging"""
    external function mobile_is_battery_charging() from "mobile.so" as Boolean
    return mobile_is_battery_charging()

define function get_battery_temperature() as Float:
    """Get battery temperature in Celsius"""
    external function mobile_get_battery_temperature() from "mobile.so" as Float
    return mobile_get_battery_temperature()

define function get_battery_voltage() as Float:
    """Get battery voltage in volts"""
    external function mobile_get_battery_voltage() from "mobile.so" as Float
    return mobile_get_battery_voltage()

# CPU Information (ARM-specific)
define function get_cpu_architecture() as String:
    """Get CPU architecture (arm, arm64, etc.)"""
    external function mobile_get_cpu_architecture() from "mobile.so" as String
    return mobile_get_cpu_architecture()

define function get_cpu_core_count() as Integer:
    """Get number of CPU cores"""
    external function mobile_get_cpu_cores() from "mobile.so" as Integer
    return mobile_get_cpu_cores()

define function get_cpu_frequency() as Integer:
    """Get CPU frequency in MHz"""
    external function mobile_get_cpu_frequency() from "mobile.so" as Integer
    return mobile_get_cpu_frequency()

define function get_cpu_temperature() as Float:
    """Get CPU temperature in Celsius"""
    external function mobile_get_cpu_temperature() from "mobile.so" as Float
    return mobile_get_cpu_temperature()

# Memory Information
define function get_total_memory() as Integer:
    """Get total memory in bytes"""
    external function mobile_get_total_memory() from "mobile.so" as Integer
    return mobile_get_total_memory()

define function get_available_memory() as Integer:
    """Get available memory in bytes"""
    external function mobile_get_available_memory() from "mobile.so" as Integer
    return mobile_get_available_memory()

define function get_memory_usage() as Float:
    """Get memory usage percentage (0.0 to 1.0)"""
    create total as Integer
    set total to get_total_memory()
    if total > 0:
        return 1.0 - (get_available_memory() as Float / total as Float)
    else:
        return 0.0

# Storage Information
define function get_total_storage() as Integer:
    """Get total storage in bytes"""
    external function mobile_get_total_storage() from "mobile.so" as Integer
    return mobile_get_total_storage()

define function get_available_storage() as Integer:
    """Get available storage in bytes"""
    external function mobile_get_available_storage() from "mobile.so" as Integer
    return mobile_get_available_storage()

define function get_storage_usage() as Float:
    """Get storage usage percentage (0.0 to 1.0)"""
    create total as Integer
    set total to get_total_storage()
    if total > 0:
        return 1.0 - (get_available_storage() as Float / total as Float)
    else:
        return 0.0

# Network Information
define function get_network_type() as String:
    """Get network type (wifi, cellular, ethernet, none)"""
    external function mobile_get_network_type() from "mobile.so" as String
    return mobile_get_network_type()

define function get_ip_address() as String:
    """Get IP address"""
    external function mobile_get_ip_address() from "mobile.so" as String
    return mobile_get_ip_address()

define function get_mac_address() as String:
    """Get MAC address"""
    external function mobile_get_mac_address() from "mobile.so" as String
    return mobile_get_mac_address()

define function is_network_connected() as Boolean:
    """Check if network is connected"""
    external function mobile_is_network_connected() from "mobile.so" as Boolean
    return mobile_is_network_connected()

define function get_signal_strength() as Integer:
    """Get signal strength (0-100)"""
    external function mobile_get_signal_strength() from "mobile.so" as Integer
    return mobile_get_signal_strength()

# Sensors
define function has_accelerometer() as Boolean:
    """Check if device has accelerometer"""
    external function mobile_has_accelerometer() from "mobile.so" as Boolean
    return mobile_has_accelerometer()

define function has_gyroscope() as Boolean:
    """Check if device has gyroscope"""
    external function mobile_has_gyroscope() from "mobile.so" as Boolean
    return mobile_has_gyroscope()

define function has_magnetometer() as Boolean:
    """Check if device has magnetometer"""
    external function mobile_has_magnetometer() from "mobile.so" as Boolean
    return mobile_has_magnetometer()

define function has_gps() as Boolean:
    """Check if device has GPS"""
    external function mobile_has_gps() from "mobile.so" as Boolean
    return mobile_has_gps()

define function get_accelerometer_data() as List:
    """Get accelerometer data [x, y, z]"""
    external function mobile_get_accelerometer_data() from "mobile.so" as pointer
    return mobile_get_accelerometer_data()

define function get_gyroscope_data() as List:
    """Get gyroscope data [x, y, z]"""
    external function mobile_get_gyroscope_data() from "mobile.so" as pointer
    return mobile_get_gyroscope_data()

define function get_magnetometer_data() as List:
    """Get magnetometer data [x, y, z]"""
    external function mobile_get_magnetometer_data() from "mobile.so" as pointer
    return mobile_get_magnetometer_data()

define function get_gps_location() as List:
    """Get GPS location [latitude, longitude, altitude]"""
    external function mobile_get_gps_location() from "mobile.so" as pointer
    return mobile_get_gps_location()

# Enhanced GPS Functions
define function start_gps_tracking() as Integer:
    """Start GPS tracking and return session ID"""
    external function mobile_start_gps_tracking() from "mobile.so" as Integer
    return mobile_start_gps_tracking()

define function stop_gps_tracking(session_id as Integer) as void:
    """Stop GPS tracking session"""
    external function mobile_stop_gps_tracking(id as Integer) from "mobile.so" as void
    mobile_stop_gps_tracking(session_id)

define function get_gps_accuracy() as Float:
    """Get GPS accuracy in meters"""
    external function mobile_get_gps_accuracy() from "mobile.so" as Float
    return mobile_get_gps_accuracy()

define function get_gps_speed() as Float:
    """Get GPS speed in m/s"""
    external function mobile_get_gps_speed() from "mobile.so" as Float
    return mobile_get_gps_speed()

define function get_gps_bearing() as Float:
    """Get GPS bearing in degrees"""
    external function mobile_get_gps_bearing() from "mobile.so" as Float
    return mobile_get_gps_bearing()

define function get_gps_satellites() as Integer:
    """Get number of GPS satellites in view"""
    external function mobile_get_gps_satellites() from "mobile.so" as Integer
    return mobile_get_gps_satellites()

define function request_location_permission() as Boolean:
    """Request location permission from user"""
    external function mobile_request_location_permission() from "mobile.so" as Boolean
    return mobile_request_location_permission()

define function is_location_permission_granted() as Boolean:
    """Check if location permission is granted"""
    external function mobile_is_location_permission_granted() from "mobile.so" as Boolean
    return mobile_is_location_permission_granted()

# Advanced Sensor Functions
define function get_accelerometer_range() as Float:
    """Get accelerometer measurement range in m/sÂ²"""
    external function mobile_get_accelerometer_range() from "mobile.so" as Float
    return mobile_get_accelerometer_range()

define function set_accelerometer_range(range_ms2 as Float) as void:
    """Set accelerometer measurement range"""
    external function mobile_set_accelerometer_range(range as Float) from "mobile.so" as void
    mobile_set_accelerometer_range(range_ms2)

define function get_gyroscope_range() as Float:
    """Get gyroscope measurement range in rad/s"""
    external function mobile_get_gyroscope_range() from "mobile.so" as Float
    return mobile_get_gyroscope_range()

define function set_gyroscope_range(range_rads as Float) as void:
    """Set gyroscope measurement range"""
    external function mobile_set_gyroscope_range(range as Float) from "mobile.so" as void
    mobile_set_gyroscope_range(range_rads)

define function get_magnetometer_range() as Float:
    """Get magnetometer measurement range in Î¼T"""
    external function mobile_get_magnetometer_range() from "mobile.so" as Float
    return mobile_get_magnetometer_range()

define function calibrate_magnetometer() as void:
    """Calibrate magnetometer sensor"""
    external function mobile_calibrate_magnetometer() from "mobile.so" as void
    mobile_calibrate_magnetometer()

define function get_pressure_sensor_data() as Float:
    """Get pressure sensor data in hPa"""
    external function mobile_get_pressure_data() from "mobile.so" as Float
    return mobile_get_pressure_data()

define function get_temperature_sensor_data() as Float:
    """Get temperature sensor data in Celsius"""
    external function mobile_get_temperature_data() from "mobile.so" as Float
    return mobile_get_temperature_data()

define function get_humidity_sensor_data() as Float:
    """Get humidity sensor data in percentage"""
    external function mobile_get_humidity_data() from "mobile.so" as Float
    return mobile_get_humidity_data()

define function get_light_sensor_data() as Float:
    """Get light sensor data in lux"""
    external function mobile_get_light_data() from "mobile.so" as Float
    return mobile_get_light_data()

define function get_proximity_sensor_data() as Float:
    """Get proximity sensor data in cm"""
    external function mobile_get_proximity_data() from "mobile.so" as Float
    return mobile_get_proximity_data()

define function has_pressure_sensor() as Boolean:
    """Check if device has pressure sensor"""
    external function mobile_has_pressure_sensor() from "mobile.so" as Boolean
    return mobile_has_pressure_sensor()

define function has_temperature_sensor() as Boolean:
    """Check if device has temperature sensor"""
    external function mobile_has_temperature_sensor() from "mobile.so" as Boolean
    return mobile_has_temperature_sensor()

define function has_humidity_sensor() as Boolean:
    """Check if device has humidity sensor"""
    external function mobile_has_humidity_sensor() from "mobile.so" as Boolean
    return mobile_has_humidity_sensor()

define function has_light_sensor() as Boolean:
    """Check if device has light sensor"""
    external function mobile_has_light_sensor() from "mobile.so" as Boolean
    return mobile_has_light_sensor()

define function has_proximity_sensor() as Boolean:
    """Check if device has proximity sensor"""
    external function mobile_has_proximity_sensor() from "mobile.so" as Boolean
    return mobile_has_proximity_sensor()

# Sensor Fusion and Motion Processing
define function get_device_orientation_quaternion() as List:
    """Get device orientation as quaternion [w, x, y, z]"""
    external function mobile_get_orientation_quaternion() from "mobile.so" as pointer
    return mobile_get_orientation_quaternion()

define function get_device_rotation_matrix() as List:
    """Get device rotation matrix (3x3)"""
    external function mobile_get_rotation_matrix() from "mobile.so" as pointer
    return mobile_get_rotation_matrix()

define function get_linear_acceleration() as List:
    """Get linear acceleration (without gravity) [x, y, z]"""
    external function mobile_get_linear_acceleration() from "mobile.so" as pointer
    return mobile_get_linear_acceleration()

define function get_gravity_vector() as List:
    """Get gravity vector [x, y, z]"""
    external function mobile_get_gravity_vector() from "mobile.so" as pointer
    return mobile_get_gravity_vector()

define function get_magnetic_field_ned() as List:
    """Get magnetic field in NED coordinates [x, y, z]"""
    external function mobile_get_magnetic_field_ned() from "mobile.so" as pointer
    return mobile_get_magnetic_field_ned()

# Step Detection and Activity Recognition
define function start_step_detection() as Integer:
    """Start step detection and return session ID"""
    external function mobile_start_step_detection() from "mobile.so" as Integer
    return mobile_start_step_detection()

define function stop_step_detection(session_id as Integer) as void:
    """Stop step detection"""
    external function mobile_stop_step_detection(id as Integer) from "mobile.so" as void
    mobile_stop_step_detection(session_id)

define function get_step_count() as Integer:
    """Get current step count"""
    external function mobile_get_step_count() from "mobile.so" as Integer
    return mobile_get_step_count()

define function reset_step_count() as void:
    """Reset step count"""
    external function mobile_reset_step_count() from "mobile.so" as void
    mobile_reset_step_count()

define function get_activity_type() as String:
    """Get current activity type (walking, running, driving, etc.)"""
    external function mobile_get_activity_type() from "mobile.so" as String
    return mobile_get_activity_type()

define function start_activity_recognition() as Integer:
    """Start activity recognition and return session ID"""
    external function mobile_start_activity_recognition() from "mobile.so" as Integer
    return mobile_start_activity_recognition()

define function stop_activity_recognition(session_id as Integer) as void:
    """Stop activity recognition"""
    external function mobile_stop_activity_recognition(id as Integer) from "mobile.so" as void
    mobile_stop_activity_recognition(session_id)

# Sensor Data Recording
define function start_sensor_recording(sensor_type as String) as Integer:
    """Start recording sensor data and return session ID"""
    external function mobile_start_sensor_recording(type as String) from "mobile.so" as Integer
    return mobile_start_sensor_recording(sensor_type)

define function stop_sensor_recording(session_id as Integer) as void:
    """Stop sensor recording"""
    external function mobile_stop_sensor_recording(id as Integer) from "mobile.so" as void
    mobile_stop_sensor_recording(session_id)

define function get_recorded_sensor_data(session_id as Integer) as List:
    """Get recorded sensor data"""
    external function mobile_get_recorded_sensor_data(id as Integer) from "mobile.so" as pointer
    return mobile_get_recorded_sensor_data(session_id)

define function save_sensor_data_to_file(session_id as Integer, filename as String) as Boolean:
    """Save recorded sensor data to file"""
    external function mobile_save_sensor_data(id as Integer, file as String) from "mobile.so" as Boolean
    return mobile_save_sensor_data(session_id, filename)

# Sensor Calibration
define function calibrate_sensor(sensor_type as String) as Boolean:
    """Calibrate specified sensor"""
    external function mobile_calibrate_sensor(type as String) from "mobile.so" as Boolean
    return mobile_calibrate_sensor(sensor_type)

define function get_sensor_calibration_status(sensor_type as String) as String:
    """Get calibration status of sensor"""
    external function mobile_get_sensor_calibration_status(type as String) from "mobile.so" as String
    return mobile_get_sensor_calibration_status(sensor_type)

# Sensor Batch Processing
define function set_sensor_update_rate(sensor_type as String, rate_hz as Float) as void:
    """Set sensor update rate in Hz"""
    external function mobile_set_sensor_update_rate(type as String, rate as Float) from "mobile.so" as void
    mobile_set_sensor_update_rate(sensor_type, rate_hz)

define function get_sensor_update_rate(sensor_type as String) as Float:
    """Get sensor update rate in Hz"""
    external function mobile_get_sensor_update_rate(type as String) from "mobile.so" as Float
    return mobile_get_sensor_update_rate(sensor_type)

define function enable_sensor_batch_mode(sensor_type as String, enabled as Boolean) as void:
    """Enable or disable sensor batch mode"""
    external function mobile_enable_sensor_batch_mode(type as String, en as Boolean) from "mobile.so" as void
    mobile_enable_sensor_batch_mode(sensor_type, enabled)

# GPS and Location Services
define function request_gps_permission() as Boolean:
    """Request GPS permission from user"""
    external function mobile_request_gps_permission() from "mobile.so" as Boolean
    return mobile_request_gps_permission()

define function is_gps_enabled() as Boolean:
    """Check if GPS is enabled"""
    external function mobile_is_gps_enabled() from "mobile.so" as Boolean
    return mobile_is_gps_enabled()

define function enable_gps() as Boolean:
    """Enable GPS"""
    external function mobile_enable_gps() from "mobile.so" as Boolean
    return mobile_enable_gps()

define function disable_gps() as void:
    """Disable GPS"""
    external function mobile_disable_gps() from "mobile.so" as void
    mobile_disable_gps()

define function get_last_known_location() as List:
    """Get last known location [latitude, longitude, altitude]"""
    external function mobile_get_last_known_location() from "mobile.so" as pointer
    return mobile_get_last_known_location()

define function get_location_provider_info() as Object:
    """Get information about location providers"""
    external function mobile_get_location_provider_info() from "mobile.so" as pointer
    return mobile_get_location_provider_info()

# Geofencing
define function add_geofence(latitude as Float, longitude as Float, radius_m as Float, identifier as String) as Integer:
    """Add geofence and return geofence ID"""
    external function mobile_add_geofence(lat as Float, lon as Float, radius as Float, id as String) from "mobile.so" as Integer
    return mobile_add_geofence(latitude, longitude, radius_m, identifier)

define function remove_geofence(geofence_id as Integer) as void:
    """Remove geofence by ID"""
    external function mobile_remove_geofence(id as Integer) from "mobile.so" as void
    mobile_remove_geofence(geofence_id)

define function get_geofence_list() as List:
    """Get list of active geofences"""
    external function mobile_get_geofence_list() from "mobile.so" as pointer
    return mobile_get_geofence_list()

# Constants
create constant SENSOR_TYPE_ACCELEROMETER as String = "accelerometer"
create constant SENSOR_TYPE_GYROSCOPE as String = "gyroscope"
create constant SENSOR_TYPE_MAGNETOMETER as String = "magnetometer"
create constant SENSOR_TYPE_PRESSURE as String = "pressure"
create constant SENSOR_TYPE_TEMPERATURE as String = "temperature"
create constant SENSOR_TYPE_HUMIDITY as String = "humidity"
create constant SENSOR_TYPE_LIGHT as String = "light"
create constant SENSOR_TYPE_PROXIMITY as String = "proximity"
create constant SENSOR_TYPE_GPS as String = "gps"

create constant ACTIVITY_TYPE_STILL as String = "still"
create constant ACTIVITY_TYPE_WALKING as String = "walking"
create constant ACTIVITY_TYPE_RUNNING as String = "running"
create constant ACTIVITY_TYPE_DRIVING as String = "driving"
create constant ACTIVITY_TYPE_BIKING as String = "biking"
create constant ACTIVITY_TYPE_UNKNOWN as String = "unknown"

create constant CALIBRATION_STATUS_CALIBRATED as String = "calibrated"
create constant CALIBRATION_STATUS_UNCALIBRATED as String = "uncalibrated"
create constant CALIBRATION_STATUS_CALIBRATING as String = "calibrating"

# Camera
define function get_camera_count() as Integer:
    """Get number of cameras"""
    external function mobile_get_camera_count() from "mobile.so" as Integer
    return mobile_get_camera_count()

define function has_front_camera() as Boolean:
    """Check if device has front camera"""
    return get_camera_count() >= 2

define function has_back_camera() as Boolean:
    """Check if device has back camera"""
    return get_camera_count() >= 1

define function get_camera_resolution(camera_id as Integer) as List:
    """Get camera resolution [width, height]"""
    external function mobile_get_camera_resolution(id as Integer) from "mobile.so" as pointer
    return mobile_get_camera_resolution(camera_id)

# Vibration
define function vibrate_device(duration_ms as Integer) as void:
    """Vibrate device for specified duration"""
    external function mobile_vibrate_device(duration as Integer) from "mobile.so" as void
    mobile_vibrate_device(duration_ms)

define function vibrate_pattern(pattern as List) as void:
    """Vibrate device with custom pattern"""
    external function mobile_vibrate_pattern(pat as pointer) from "mobile.so" as void
    mobile_vibrate_pattern(pattern)

# Power Management
define function set_screen_brightness(level as Float) as void:
    """Set screen brightness (0.0 to 1.0)"""
    external function mobile_set_screen_brightness(lvl as Float) from "mobile.so" as void
    mobile_set_screen_brightness(level)

define function get_screen_brightness() as Float:
    """Get screen brightness (0.0 to 1.0)"""
    external function mobile_get_screen_brightness() from "mobile.so" as Float
    return mobile_get_screen_brightness()

define function set_screen_timeout(timeout_ms as Integer) as void:
    """Set screen timeout in milliseconds"""
    external function mobile_set_screen_timeout(timeout as Integer) from "mobile.so" as void
    mobile_set_screen_timeout(timeout_ms)

define function keep_screen_on(enable as Boolean) as void:
    """Keep screen on or allow it to turn off"""
    external function mobile_keep_screen_on(en as Boolean) from "mobile.so" as void
    mobile_keep_screen_on(enable)

# Orientation
define function get_device_orientation() as String:
    """Get device orientation (portrait, landscape, reverse_portrait, reverse_landscape)"""
    external function mobile_get_device_orientation() from "mobile.so" as String
    return mobile_get_device_orientation()

define function lock_orientation(orientation as String) as void:
    """Lock device orientation"""
    external function mobile_lock_orientation(orient as String) from "mobile.so" as void
    mobile_lock_orientation(orientation)

define function unlock_orientation() as void:
    """Unlock device orientation"""
    external function mobile_unlock_orientation() from "mobile.so" as void
    mobile_unlock_orientation()

# System Features
define function has_bluetooth() as Boolean:
    """Check if device has Bluetooth"""
    external function mobile_has_bluetooth() from "mobile.so" as Boolean
    return mobile_has_bluetooth()

define function has_nfc() as Boolean:
    """Check if device has NFC"""
    external function mobile_has_nfc() from "mobile.so" as Boolean
    return mobile_has_nfc()

define function has_fingerprint() as Boolean:
    """Check if device has fingerprint sensor"""
    external function mobile_has_fingerprint() from "mobile.so" as Boolean
    return mobile_has_fingerprint()

define function has_face_recognition() as Boolean:
    """Check if device has face recognition"""
    external function mobile_has_face_recognition() from "mobile.so" as Boolean
    return mobile_has_face_recognition()

# Constants
create constant NETWORK_TYPE_WIFI as String = "wifi"
create constant NETWORK_TYPE_CELLULAR as String = "cellular"
create constant NETWORK_TYPE_ETHERNET as String = "ethernet"
create constant NETWORK_TYPE_NONE as String = "none"

create constant ORIENTATION_PORTRAIT as String = "portrait"
create constant ORIENTATION_LANDSCAPE as String = "landscape"
create constant ORIENTATION_REVERSE_PORTRAIT as String = "reverse_portrait"
create constant ORIENTATION_REVERSE_LANDSCAPE as String = "reverse_landscape"

create constant CPU_ARCH_ARM as String = "arm"
create constant CPU_ARCH_ARM64 as String = "arm64"
create constant CPU_ARCH_X86 as String = "x86"
create constant CPU_ARCH_X86_64 as String = "x86_64"