# AGK IoT Microcontroller Support Library
# Provides comprehensive support for microcontroller-based IoT devices
# Supports Arduino, ESP32, Raspberry Pi Pico, and other popular platforms

# Microcontroller Types
create constant MCU_ARDUINO_UNO as String = "arduino_uno"
create constant MCU_ARDUINO_MEGA as String = "arduino_mega"
create constant MCU_ARDUINO_NANO as String = "arduino_nano"
create constant MCU_ESP32 as String = "esp32"
create constant MCU_ESP8266 as String = "esp8266"
create constant MCU_RASPBERRY_PI_PICO as String = "rpi_pico"
create constant MCU_STM32 as String = "stm32"
create constant MCU_ARDUINO_DUE as String = "arduino_due"
create constant MCU_TEENSY as String = "teensy"

# Pin Modes
create constant PIN_MODE_INPUT as String = "input"
create constant PIN_MODE_OUTPUT as String = "output"
create constant PIN_MODE_INPUT_PULLUP as String = "input_pullup"
create constant PIN_MODE_INPUT_PULLDOWN as String = "input_pulldown"
create constant PIN_MODE_ANALOG as String = "analog"
create constant PIN_MODE_PWM as String = "pwm"
create constant PIN_MODE_I2C as String = "i2c"
create constant PIN_MODE_SPI as String = "spi"
create constant PIN_MODE_UART as String = "uart"
create constant PIN_MODE_INTERRUPT as String = "interrupt"

# Digital Values
create constant LOW as Integer = 0
create constant HIGH as Integer = 1

# Analog Reference
create constant DEFAULT as String = "default"
create constant INTERNAL as String = "internal"
create constant EXTERNAL as String = "external"

# Interrupt Modes
create constant RISING as String = "rising"
create constant FALLING as String = "falling"
create constant CHANGE as String = "change"
create constant LOW_LEVEL as String = "low"
create constant HIGH_LEVEL as String = "high"

# Microcontroller Initialization
define function init_microcontroller(type as String) as McuDevice:
    """Initialize microcontroller device"""
    external function mcu_init(type as String) from "iot_mcu.so" as pointer
    create device as McuDevice
    set device["handle"] to mcu_init(type)
    set device["type"] to type
    set device["initialized"] to true
    return device

define function close_microcontroller(device as McuDevice) as void:
    """Close microcontroller connection"""
    external function mcu_close(handle as pointer) from "iot_mcu.so" as void
    mcu_close(device["handle"])
    set device["initialized"] to false

# Pin Management
define function pin_mode(device as McuDevice, pin as Integer, mode as String) as Boolean:
    """Set pin mode"""
    external function mcu_pin_mode(handle as pointer, pin as Integer, mode as String) from "iot_mcu.so" as Boolean
    return mcu_pin_mode(device["handle"], pin, mode)

define function digital_write(device as McuDevice, pin as Integer, value as Integer) as Boolean:
    """Write digital value to pin"""
    external function mcu_digital_write(handle as pointer, pin as Integer, val as Integer) from "iot_mcu.so" as Boolean
    return mcu_digital_write(device["handle"], pin, value)

define function digital_read(device as McuDevice, pin as Integer) as Integer:
    """Read digital value from pin"""
    external function mcu_digital_read(handle as pointer, pin as Integer) from "iot_mcu.so" as Integer
    return mcu_digital_read(device["handle"], pin)

define function analog_write(device as McuDevice, pin as Integer, value as Integer) as Boolean:
    """Write analog/PWM value to pin (0-255)"""
    external function mcu_analog_write(handle as pointer, pin as Integer, val as Integer) from "iot_mcu.so" as Boolean
    return mcu_analog_write(device["handle"], pin, value)

define function analog_read(device as McuDevice, pin as Integer) as Integer:
    """Read analog value from pin (0-1023)"""
    external function mcu_analog_read(handle as pointer, pin as Integer) from "iot_mcu.so" as Integer
    return mcu_analog_read(device["handle"], pin)

define function analog_reference(device as McuDevice, reference as String) as void:
    """Set analog reference voltage"""
    external function mcu_analog_reference(handle as pointer, ref as String) from "iot_mcu.so" as void
    mcu_analog_reference(device["handle"], reference)

# PWM Functions
define function pwm_frequency(device as McuDevice, pin as Integer, frequency as Integer) as Boolean:
    """Set PWM frequency for pin"""
    external function mcu_pwm_frequency(handle as pointer, pin as Integer, freq as Integer) from "iot_mcu.so" as Boolean
    return mcu_pwm_frequency(device["handle"], pin, frequency)

define function pwm_duty_cycle(device as McuDevice, pin as Integer, duty as Float) as Boolean:
    """Set PWM duty cycle (0.0-1.0)"""
    external function mcu_pwm_duty_cycle(handle as pointer, pin as Integer, duty as Float) from "iot_mcu.so" as Boolean
    return mcu_pwm_duty_cycle(device["handle"], pin, duty)

# Interrupt Functions
define function attach_interrupt(device as McuDevice, pin as Integer, callback as Function, mode as String) as Boolean:
    """Attach interrupt to pin"""
    external function mcu_attach_interrupt(handle as pointer, pin as Integer, cb as pointer, mode as String) from "iot_mcu.so" as Boolean
    return mcu_attach_interrupt(device["handle"], pin, callback, mode)

define function detach_interrupt(device as McuDevice, pin as Integer) as Boolean:
    """Detach interrupt from pin"""
    external function mcu_detach_interrupt(handle as pointer, pin as Integer) from "iot_mcu.so" as Boolean
    return mcu_detach_interrupt(device["handle"], pin)

# Timing Functions
define function delay(device as McuDevice, milliseconds as Integer) as void:
    """Delay execution in milliseconds"""
    external function mcu_delay(handle as pointer, ms as Integer) from "iot_mcu.so" as void
    mcu_delay(device["handle"], milliseconds)

define function delay_microseconds(device as McuDevice, microseconds as Integer) as void:
    """Delay execution in microseconds"""
    external function mcu_delay_microseconds(handle as pointer, us as Integer) from "iot_mcu.so" as void
    mcu_delay_microseconds(device["handle"], microseconds)

define function millis(device as McuDevice) as Integer:
    """Get milliseconds since device start"""
    external function mcu_millis(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_millis(device["handle"])

define function micros(device as McuDevice) as Integer:
    """Get microseconds since device start"""
    external function mcu_micros(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_micros(device["handle"])

# Serial Communication (UART)
define function serial_begin(device as McuDevice, baud_rate as Integer) as Boolean:
    """Initialize serial communication"""
    external function mcu_serial_begin(handle as pointer, baud as Integer) from "iot_mcu.so" as Boolean
    return mcu_serial_begin(device["handle"], baud_rate)

define function serial_write(device as McuDevice, data as String) as Integer:
    """Write data to serial port"""
    external function mcu_serial_write(handle as pointer, data as String) from "iot_mcu.so" as Integer
    return mcu_serial_write(device["handle"], data)

define function serial_read(device as McuDevice) as String:
    """Read data from serial port"""
    external function mcu_serial_read(handle as pointer) from "iot_mcu.so" as String
    return mcu_serial_read(device["handle"])

define function serial_available(device as McuDevice) as Integer:
    """Get number of bytes available in serial buffer"""
    external function mcu_serial_available(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_serial_available(device["handle"])

define function serial_end(device as McuDevice) as void:
    """End serial communication"""
    external function mcu_serial_end(handle as pointer) from "iot_mcu.so" as void
    mcu_serial_end(device["handle"])

# I2C Communication
define function i2c_begin(device as McuDevice) as Boolean:
    """Initialize I2C as master"""
    external function mcu_i2c_begin(handle as pointer) from "iot_mcu.so" as Boolean
    return mcu_i2c_begin(device["handle"])

define function i2c_begin_transmission(device as McuDevice, address as Integer) as Boolean:
    """Begin I2C transmission to slave address"""
    external function mcu_i2c_begin_transmission(handle as pointer, addr as Integer) from "iot_mcu.so" as Boolean
    return mcu_i2c_begin_transmission(device["handle"], address)

define function i2c_write(device as McuDevice, data as Integer) as Integer:
    """Write byte to I2C bus"""
    external function mcu_i2c_write(handle as pointer, data as Integer) from "iot_mcu.so" as Integer
    return mcu_i2c_write(device["handle"], data)

define function i2c_end_transmission(device as McuDevice) as Integer:
    """End I2C transmission"""
    external function mcu_i2c_end_transmission(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_i2c_end_transmission(device["handle"])

define function i2c_request_from(device as McuDevice, address as Integer, quantity as Integer) as String:
    """Request data from I2C slave"""
    external function mcu_i2c_request_from(handle as pointer, addr as Integer, qty as Integer) from "iot_mcu.so" as String
    return mcu_i2c_request_from(device["handle"], address, quantity)

define function i2c_read(device as McuDevice) as Integer:
    """Read byte from I2C bus"""
    external function mcu_i2c_read(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_i2c_read(device["handle"])

# SPI Communication
define function spi_begin(device as McuDevice) as Boolean:
    """Initialize SPI as master"""
    external function mcu_spi_begin(handle as pointer) from "iot_mcu.so" as Boolean
    return mcu_spi_begin(device["handle"])

define function spi_set_clock_divider(device as McuDevice, divider as Integer) as void:
    """Set SPI clock divider"""
    external function mcu_spi_set_clock_divider(handle as pointer, div as Integer) from "iot_mcu.so" as void
    mcu_spi_set_clock_divider(device["handle"], divider)

define function spi_transfer(device as McuDevice, data as Integer) as Integer:
    """Transfer byte over SPI"""
    external function mcu_spi_transfer(handle as pointer, data as Integer) from "iot_mcu.so" as Integer
    return mcu_spi_transfer(device["handle"], data)

define function spi_end(device as McuDevice) as void:
    """End SPI communication"""
    external function mcu_spi_end(handle as pointer) from "iot_mcu.so" as void
    mcu_spi_end(device["handle"])

# Memory Functions
define function get_free_memory(device as McuDevice) as Integer:
    """Get free memory in bytes"""
    external function mcu_get_free_memory(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_get_free_memory(device["handle"])

define function get_total_memory(device as McuDevice) as Integer:
    """Get total memory in bytes"""
    external function mcu_get_total_memory(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_get_total_memory(device["handle"])

# EEPROM Functions (for AVR-based boards)
define function eeprom_read(device as McuDevice, address as Integer) as Integer:
    """Read byte from EEPROM"""
    external function mcu_eeprom_read(handle as pointer, addr as Integer) from "iot_mcu.so" as Integer
    return mcu_eeprom_read(device["handle"], address)

define function eeprom_write(device as McuDevice, address as Integer, value as Integer) as void:
    """Write byte to EEPROM"""
    external function mcu_eeprom_write(handle as pointer, addr as Integer, val as Integer) from "iot_mcu.so" as void
    mcu_eeprom_write(device["handle"], address, value)

# Watchdog Timer
define function watchdog_enable(device as McuDevice, timeout_seconds as Integer) as void:
    """Enable watchdog timer"""
    external function mcu_watchdog_enable(handle as pointer, timeout as Integer) from "iot_mcu.so" as void
    mcu_watchdog_enable(device["handle"], timeout_seconds)

define function watchdog_reset(device as McuDevice) as void:
    """Reset watchdog timer"""
    external function mcu_watchdog_reset(handle as pointer) from "iot_mcu.so" as void
    mcu_watchdog_reset(device["handle"])

define function watchdog_disable(device as McuDevice) as void:
    """Disable watchdog timer"""
    external function mcu_watchdog_disable(handle as pointer) from "iot_mcu.so" as void
    mcu_watchdog_disable(device["handle"])

# Sleep Modes
define function sleep_mode(device as McuDevice, mode as String) as void:
    """Put microcontroller into sleep mode"""
    external function mcu_sleep_mode(handle as pointer, mode as String) from "iot_mcu.so" as void
    mcu_sleep_mode(device["handle"], mode)

define function wake_up(device as McuDevice) as void:
    """Wake up microcontroller from sleep"""
    external function mcu_wake_up(handle as pointer) from "iot_mcu.so" as void
    mcu_wake_up(device["handle"])

# Random Number Generation
define function random_seed(device as McuDevice, seed as Integer) as void:
    """Initialize random number generator"""
    external function mcu_random_seed(handle as pointer, seed as Integer) from "iot_mcu.so" as void
    mcu_random_seed(device["handle"], seed)

define function random(device as McuDevice, min as Integer, max as Integer) as Integer:
    """Generate random number in range"""
    external function mcu_random(handle as pointer, min as Integer, max as Integer) from "iot_mcu.so" as Integer
    return mcu_random(device["handle"], min, max)

define function random_float(device as McuDevice) as Float:
    """Generate random float between 0 and 1"""
    external function mcu_random_float(handle as pointer) from "iot_mcu.so" as Float
    return mcu_random_float(device["handle"])

# Device Information
define function get_device_info(device as McuDevice) as Object:
    """Get microcontroller device information"""
    create info as Object
    set info["type"] to device["type"]
    set info["free_memory"] to get_free_memory(device)
    set info["total_memory"] to get_total_memory(device)
    set info["uptime_ms"] to millis(device)
    return info

define function get_pin_count(device as McuDevice) as Integer:
    """Get number of available pins"""
    external function mcu_get_pin_count(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_get_pin_count(device["handle"])

define function get_analog_pin_count(device as McuDevice) as Integer:
    """Get number of analog pins"""
    external function mcu_get_analog_pin_count(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_get_analog_pin_count(device["handle"])

define function get_pwm_pin_count(device as McuDevice) as Integer:
    """Get number of PWM pins"""
    external function mcu_get_pwm_pin_count(handle as pointer) from "iot_mcu.so" as Integer
    return mcu_get_pwm_pin_count(device["handle"])

# Error Handling
define function get_last_error(device as McuDevice) as String:
    """Get last error message"""
    external function mcu_get_last_error(handle as pointer) from "iot_mcu.so" as String
    return mcu_get_last_error(device["handle"])

define function clear_error(device as McuDevice) as void:
    """Clear last error"""
    external function mcu_clear_error(handle as pointer) from "iot_mcu.so" as void
    mcu_clear_error(device["handle"])

# Constants for Common Pin Numbers
# Arduino Uno
create constant PIN_A0 as Integer = 14
create constant PIN_A1 as Integer = 15
create constant PIN_A2 as Integer = 16
create constant PIN_A3 as Integer = 17
create constant PIN_A4 as Integer = 18
create constant PIN_A5 as Integer = 19

# Sleep Mode Constants
create constant SLEEP_MODE_IDLE as String = "idle"
create constant SLEEP_MODE_ADC as String = "adc"
create constant SLEEP_MODE_PWR_DOWN as String = "power_down"
create constant SLEEP_MODE_PWR_SAVE as String = "power_save"
create constant SLEEP_MODE_STANDBY as String = "standby"
create constant SLEEP_MODE_EXT_STANDBY as String = "ext_standby"

# SPI Clock Dividers
create constant SPI_CLOCK_DIV2 as Integer = 2
create constant SPI_CLOCK_DIV4 as Integer = 4
create constant SPI_CLOCK_DIV8 as Integer = 8
create constant SPI_CLOCK_DIV16 as Integer = 16
create constant SPI_CLOCK_DIV32 as Integer = 32
create constant SPI_CLOCK_DIV64 as Integer = 64
create constant SPI_CLOCK_DIV128 as Integer = 128

# I2C Constants
create constant I2C_BUFFER_LENGTH as Integer = 32
create constant I2C_MAX_ADDRESS as Integer = 127

# Example Usage
define function arduino_blink_example:
    """Basic Arduino blink example"""
    # Initialize Arduino Uno
    create arduino as McuDevice
    set arduino to init_microcontroller(MCU_ARDUINO_UNO)

    # Set pin 13 as output
    pin_mode(arduino, 13, PIN_MODE_OUTPUT)

    # Blink loop
    create i as Integer
    set i to 0
    while i < 10:
        digital_write(arduino, 13, HIGH)
        delay(arduino, 1000)
        digital_write(arduino, 13, LOW)
        delay(arduino, 1000)
        set i to i + 1

    close_microcontroller(arduino)

define function analog_read_example:
    """Analog read example"""
    create arduino as McuDevice
    set arduino to init_microcontroller(MCU_ARDUINO_UNO)

    # Read from analog pin A0
    create sensor_value as Integer
    set sensor_value to analog_read(arduino, PIN_A0)

    io.print("Sensor value: " + string.format(sensor_value))

    close_microcontroller(arduino)

define function pwm_led_fade_example:
    """PWM LED fade example"""
    create arduino as McuDevice
    set arduino to init_microcontroller(MCU_ARDUINO_UNO)

    # Set PWM pin
    pin_mode(arduino, 9, PIN_MODE_PWM)

    # Fade in and out
    create brightness as Integer
    set brightness to 0
    while brightness <= 255:
        analog_write(arduino, 9, brightness)
        delay(arduino, 10)
        set brightness to brightness + 5

    set brightness to 255
    while brightness >= 0:
        analog_write(arduino, 9, brightness)
        delay(arduino, 10)
        set brightness to brightness - 5

    close_microcontroller(arduino)

define function i2c_sensor_example:
    """I2C sensor reading example"""
    create esp32 as McuDevice
    set esp32 to init_microcontroller(MCU_ESP32)

    # Initialize I2C
    i2c_begin(esp32)

    # Read from I2C sensor at address 0x68
    i2c_begin_transmission(esp32, 0x68)
    i2c_write(esp32, 0x00)  # Register address
    i2c_end_transmission(esp32)

    i2c_request_from(esp32, 0x68, 2)
    create data_high as Integer
    create data_low as Integer
    set data_high to i2c_read(esp32)
    set data_low to i2c_read(esp32)

    create sensor_value as Integer
    set sensor_value to (data_high * 256) + data_low

    io.print("I2C Sensor value: " + string.format(sensor_value))

    close_microcontroller(esp32)

define function interrupt_example:
    """Interrupt handling example"""
    create arduino as McuDevice
    set arduino to init_microcontroller(MCU_ARDUINO_UNO)

    # Set pin 2 as input with pullup
    pin_mode(arduino, 2, PIN_MODE_INPUT_PULLUP)

    # Define interrupt callback
    define function button_pressed:
        io.print("Button pressed!")

    # Attach interrupt
    attach_interrupt(arduino, 2, button_pressed, FALLING)

    # Main loop
    while true:
        # Do other work
        delay(arduino, 100)

    close_microcontroller(arduino)