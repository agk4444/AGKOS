# AGK IoT Over-The-Air (OTA) Update Library
# Comprehensive OTA update system for IoT devices
# Supports firmware updates, software updates, and delta updates

# Update Types
create constant UPDATE_TYPE_FIRMWARE as String = "firmware"
create constant UPDATE_TYPE_SOFTWARE as String = "software"
create constant UPDATE_TYPE_CONFIG as String = "config"
create constant UPDATE_TYPE_SECURITY as String = "security"
create constant UPDATE_TYPE_PATCH as String = "patch"

# Update Methods
create constant UPDATE_METHOD_FULL as String = "full"
create constant UPDATE_METHOD_DELTA as String = "delta"
create constant UPDATE_METHOD_DIFFERENTIAL as String = "differential"

# Update States
create constant UPDATE_STATE_IDLE as String = "idle"
create constant UPDATE_STATE_CHECKING as String = "checking"
create constant UPDATE_STATE_AVAILABLE as String = "available"
create constant UPDATE_STATE_DOWNLOADING as String = "downloading"
create constant UPDATE_STATE_DOWNLOADED as String = "downloaded"
create constant UPDATE_STATE_VERIFYING as String = "verifying"
create constant UPDATE_STATE_INSTALLING as String = "installing"
create constant UPDATE_STATE_SUCCESS as String = "success"
create constant UPDATE_STATE_FAILED as String = "failed"
create constant UPDATE_STATE_ROLLED_BACK as String = "rolled_back"

# Update Priorities
create constant PRIORITY_LOW as Integer = 1
create constant PRIORITY_NORMAL as Integer = 2
create constant PRIORITY_HIGH as Integer = 3
create constant PRIORITY_CRITICAL as Integer = 4

# Update Sources
create constant SOURCE_CLOUD as String = "cloud"
create constant SOURCE_LOCAL as String = "local"
create constant SOURCE_PEER as String = "peer"
create constant SOURCE_MANUAL as String = "manual"

# OTA Manager
define function create_ota_manager() as OtaManager:
    """Create OTA update manager"""
    external function ota_manager_create() from "iot_ota.so" as pointer
    create manager as OtaManager
    set manager["update_queue"] to []
    set manager["current_update"] to ""
    set manager["auto_check_enabled"] to false
    set manager["update_state"] to UPDATE_STATE_IDLE
    return manager

define function enable_auto_update_check(manager as OtaManager, interval_minutes as Integer) as Boolean:
    """Enable automatic update checking"""
    external function ota_enable_auto_check(handle as pointer, interval as Integer) from "iot_ota.so" as Boolean
    set manager["auto_check_enabled"] to ota_enable_auto_check(manager["handle"], interval_minutes)
    return manager["auto_check_enabled"]

define function disable_auto_update_check(manager as OtaManager) as Boolean:
    """Disable automatic update checking"""
    external function ota_disable_auto_check(handle as pointer) from "iot_ota.so" as Boolean
    set manager["auto_check_enabled"] to !ota_disable_auto_check(manager["handle"])
    return !manager["auto_check_enabled"]

# Update Discovery and Management
define function check_for_updates(manager as OtaManager, update_type as String) as List:
    """Check for available updates"""
    external function ota_check_updates(handle as pointer, update_type as String) from "iot_ota.so" as pointer
    return ota_check_updates(manager["handle"], update_type)

define function create_update_package(manager as OtaManager, package_info as Object) as String:
    """Create update package"""
    external function ota_create_package(handle as pointer, info as pointer) from "iot_ota.so" as String
    return ota_create_package(manager["handle"], package_info)

define function add_update_to_queue(manager as OtaManager, update_id as String, priority as Integer) as Boolean:
    """Add update to download/install queue"""
    external function ota_add_to_queue(handle as pointer, update_id as String, priority as Integer) from "iot_ota.so" as Boolean
    create queue_item as Object
    set queue_item["update_id"] to update_id
    set queue_item["priority"] to priority
    set queue_item["state"] to UPDATE_STATE_IDLE
    add queue_item to manager["update_queue"]
    return ota_add_to_queue(manager["handle"], update_id, priority)

define function remove_update_from_queue(manager as OtaManager, update_id as String) as Boolean:
    """Remove update from queue"""
    external function ota_remove_from_queue(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    create i as Integer
    set i to 0
    while i < list.length(manager["update_queue"]):
        create item as Object
        set item to manager["update_queue"][i]
        if item["update_id"] == update_id:
            remove item from manager["update_queue"] at i
            break
        end
        set i to i + 1
    end
    return ota_remove_from_queue(manager["handle"], update_id)

define function get_update_queue(manager as OtaManager) as List:
    """Get current update queue"""
    return manager["update_queue"]

define function get_update_info(manager as OtaManager, update_id as String) as Object:
    """Get update information"""
    external function ota_get_update_info(handle as pointer, update_id as String) from "iot_ota.so" as pointer
    return ota_get_update_info(manager["handle"], update_id)

# Update Download
define function download_update(manager as OtaManager, update_id as String) as Boolean:
    """Download update package"""
    external function ota_download_update(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    set manager["current_update"] to update_id
    set manager["update_state"] to UPDATE_STATE_DOWNLOADING
    return ota_download_update(manager["handle"], update_id)

define function pause_download(manager as OtaManager, update_id as String) as Boolean:
    """Pause update download"""
    external function ota_pause_download(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    return ota_pause_download(manager["handle"], update_id)

define function resume_download(manager as OtaManager, update_id as String) as Boolean:
    """Resume update download"""
    external function ota_resume_download(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    return ota_resume_download(manager["handle"], update_id)

define function cancel_download(manager as OtaManager, update_id as String) as Boolean:
    """Cancel update download"""
    external function ota_cancel_download(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    if manager["current_update"] == update_id:
        set manager["current_update"] to ""
        set manager["update_state"] to UPDATE_STATE_IDLE
    end
    return ota_cancel_download(manager["handle"], update_id)

define function get_download_progress(manager as OtaManager, update_id as String) as Float:
    """Get download progress (0.0-1.0)"""
    external function ota_get_download_progress(handle as pointer, update_id as String) from "iot_ota.so" as Float
    return ota_get_download_progress(manager["handle"], update_id)

define function get_download_speed(manager as OtaManager, update_id as String) as Float:
    """Get download speed in bytes per second"""
    external function ota_get_download_speed(handle as pointer, update_id as String) from "iot_ota.so" as Float
    return ota_get_download_speed(manager["handle"], update_id)

# Update Verification
define function verify_update(manager as OtaManager, update_id as String) as Boolean:
    """Verify update package integrity"""
    external function ota_verify_update(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    set manager["update_state"] to UPDATE_STATE_VERIFYING
    return ota_verify_update(manager["handle"], update_id)

define function get_update_checksum(manager as OtaManager, update_id as String) as String:
    """Get update package checksum"""
    external function ota_get_checksum(handle as pointer, update_id as String) from "iot_ota.so" as String
    return ota_get_checksum(manager["handle"], update_id)

define function verify_update_signature(manager as OtaManager, update_id as String, public_key as String) as Boolean:
    """Verify update package signature"""
    external function ota_verify_signature(handle as pointer, update_id as String, public_key as String) from "iot_ota.so" as Boolean
    return ota_verify_signature(manager["handle"], update_id, public_key)

define function check_update_compatibility(manager as OtaManager, update_id as String, device_info as Object) as Boolean:
    """Check if update is compatible with device"""
    external function ota_check_compatibility(handle as pointer, update_id as String, device_info as pointer) from "iot_ota.so" as Boolean
    return ota_check_compatibility(manager["handle"], update_id, device_info)

# Update Installation
define function install_update(manager as OtaManager, update_id as String, install_options as Object) as Boolean:
    """Install update package"""
    external function ota_install_update(handle as pointer, update_id as String, options as pointer) from "iot_ota.so" as Boolean
    set manager["update_state"] to UPDATE_STATE_INSTALLING
    return ota_install_update(manager["handle"], update_id, install_options)

define function get_installation_progress(manager as OtaManager, update_id as String) as Float:
    """Get installation progress (0.0-1.0)"""
    external function ota_get_install_progress(handle as pointer, update_id as String) from "iot_ota.so" as Float
    return ota_get_install_progress(manager["handle"], update_id)

define function set_installation_callback(manager as OtaManager, update_id as String, callback as Function) as Boolean:
    """Set installation progress callback"""
    external function ota_set_install_callback(handle as pointer, update_id as String, cb as pointer) from "iot_ota.so" as Boolean
    return ota_set_install_callback(manager["handle"], update_id, callback)

# Rollback and Recovery
define function rollback_update(manager as OtaManager, update_id as String) as Boolean:
    """Rollback to previous version"""
    external function ota_rollback_update(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    set manager["update_state"] to UPDATE_STATE_ROLLED_BACK
    return ota_rollback_update(manager["handle"], update_id)

define function create_backup_before_update(manager as OtaManager, update_id as String) as Boolean:
    """Create backup before installing update"""
    external function ota_create_backup(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    return ota_create_backup(manager["handle"], update_id)

define function restore_from_backup(manager as OtaManager, backup_id as String) as Boolean:
    """Restore from backup"""
    external function ota_restore_backup(handle as pointer, backup_id as String) from "iot_ota.so" as Boolean
    return ota_restore_backup(manager["handle"], backup_id)

define function get_available_backups(manager as OtaManager) as List:
    """Get list of available backups"""
    external function ota_get_backups(handle as pointer) from "iot_ota.so" as pointer
    return ota_get_backups(manager["handle"])

# Update Scheduling
define function schedule_update(manager as OtaManager, update_id as String, schedule_time as String, conditions as Object) as Boolean:
    """Schedule update for future installation"""
    external function ota_schedule_update(handle as pointer, update_id as String, schedule_time as String, conditions as pointer) from "iot_ota.so" as Boolean
    return ota_schedule_update(manager["handle"], update_id, schedule_time, conditions)

define function cancel_scheduled_update(manager as OtaManager, update_id as String) as Boolean:
    """Cancel scheduled update"""
    external function ota_cancel_scheduled_update(handle as pointer, update_id as String) from "iot_ota.so" as Boolean
    return ota_cancel_scheduled_update(manager["handle"], update_id)

define function get_scheduled_updates(manager as OtaManager) as List:
    """Get list of scheduled updates"""
    external function ota_get_scheduled_updates(handle as pointer) from "iot_ota.so" as pointer
    return ota_get_scheduled_updates(manager["handle"])

# Delta and Differential Updates
define function create_delta_update(manager as OtaManager, base_version as String, target_version as String, source_path as String) as String:
    """Create delta update from two versions"""
    external function ota_create_delta(handle as pointer, base_version as String, target_version as String, source_path as String) from "iot_ota.so" as String
    return ota_create_delta(manager["handle"], base_version, target_version, source_path)

define function apply_delta_update(manager as OtaManager, update_id as String, base_firmware_path as String) as Boolean:
    """Apply delta update to base firmware"""
    external function ota_apply_delta(handle as pointer, update_id as String, base_path as String) from "iot_ota.so" as Boolean
    return ota_apply_delta(manager["handle"], update_id, base_firmware_path)

define function get_delta_update_size(manager as OtaManager, update_id as String) as Integer:
    """Get delta update package size in bytes"""
    external function ota_get_delta_size(handle as pointer, update_id as String) from "iot_ota.so" as Integer
    return ota_get_delta_size(manager["handle"], update_id)

# Update Dependencies and Chains
define function add_update_dependency(manager as OtaManager, update_id as String, dependency_id as String) as Boolean:
    """Add dependency to update"""
    external function ota_add_dependency(handle as pointer, update_id as String, dependency_id as String) from "iot_ota.so" as Boolean
    return ota_add_dependency(manager["handle"], update_id, dependency_id)

define function get_update_dependencies(manager as OtaManager, update_id as String) as List:
    """Get update dependencies"""
    external function ota_get_dependencies(handle as pointer, update_id as String) from "iot_ota.so" as pointer
    return ota_get_dependencies(manager["handle"], update_id)

define function validate_update_chain(manager as OtaManager, update_chain as List) as Boolean:
    """Validate update dependency chain"""
    external function ota_validate_chain(handle as pointer, chain as pointer) from "iot_ota.so" as Boolean
    return ota_validate_chain(manager["handle"], update_chain)

# Update Distribution and Management
define function create_update_distribution_package(manager as OtaManager, update_list as List, target_devices as List) as String:
    """Create distribution package for multiple devices"""
    external function ota_create_distribution_package(handle as pointer, updates as pointer, devices as pointer) from "iot_ota.so" as String
    return ota_create_distribution_package(manager["handle"], update_list, target_devices)

define function deploy_update_to_devices(manager as OtaManager, update_id as String, device_list as List, deployment_options as Object) as Object:
    """Deploy update to multiple devices"""
    external function ota_deploy_to_devices(handle as pointer, update_id as String, devices as pointer, options as pointer) from "iot_ota.so" as pointer
    return ota_deploy_to_devices(manager["handle"], update_id, device_list, deployment_options)

define function get_deployment_status(manager as OtaManager, deployment_id as String) as Object:
    """Get deployment status"""
    external function ota_get_deployment_status(handle as pointer, deployment_id as String) from "iot_ota.so" as pointer
    return ota_get_deployment_status(manager["handle"], deployment_id)

# Update Analytics and Reporting
define function get_update_statistics(manager as OtaManager, time_range as String) as Object:
    """Get update statistics"""
    external function ota_get_statistics(handle as pointer, time_range as String) from "iot_ota.so" as pointer
    return ota_get_statistics(manager["handle"], time_range)

define function generate_update_report(manager as OtaManager, update_id as String, report_type as String) as String:
    """Generate update report"""
    external function ota_generate_report(handle as pointer, update_id as String, report_type as String) from "iot_ota.so" as String
    return ota_generate_report(manager["handle"], update_id, report_type)

define function get_update_success_rate(manager as OtaManager, update_id as String) as Float:
    """Get update success rate (0.0-1.0)"""
    external function ota_get_success_rate(handle as pointer, update_id as String) from "iot_ota.so" as Float
    return ota_get_success_rate(manager["handle"], update_id)

# Error Handling and Recovery
define function get_update_error(manager as OtaManager, update_id as String) as String:
    """Get update error message"""
    external function ota_get_error(handle as pointer, update_id as String) from "iot_ota.so" as String
    return ota_get_error(manager["handle"], update_id)

define function clear_update_error(manager as OtaManager, update_id as String) as void:
    """Clear update error"""
    external function ota_clear_error(handle as pointer, update_id as String) from "iot_ota.so" as void
    ota_clear_error(manager["handle"], update_id)

define function retry_failed_update(manager as OtaManager, update_id as String, max_retries as Integer) as Boolean:
    """Retry failed update"""
    external function ota_retry_update(handle as pointer, update_id as String, max_retries as Integer) from "iot_ota.so" as Boolean
    return ota_retry_update(manager["handle"], update_id, max_retries)

# Example Usage
define function ota_update_example:
    """OTA update example"""
    # Create OTA manager
    create ota_manager as OtaManager
    set ota_manager to create_ota_manager()

    # Enable automatic update checking every 60 minutes
    enable_auto_update_check(ota_manager, 60)

    # Check for firmware updates
    create available_updates as List
    set available_updates to check_for_updates(ota_manager, UPDATE_TYPE_FIRMWARE)

    io.print("Found " + string.format(list.length(available_updates)) + " available updates")

    # Process each available update
    create i as Integer
    set i to 0
    while i < list.length(available_updates):
        create update as Object
        set update to available_updates[i]

        io.print("Update available: " + update["id"] + " - " + update["description"])
        io.print("  Size: " + string.format(update["size"]) + " bytes")
        io.print("  Version: " + update["version"])

        # Add critical updates to queue with high priority
        if update["priority"] >= PRIORITY_HIGH:
            add_update_to_queue(ota_manager, update["id"], update["priority"])
            io.print("  Added to download queue with high priority")
        end

        set i to i + 1
    end

    # Download and install updates from queue
    create queue as List
    set queue to get_update_queue(ota_manager)

    create j as Integer
    set j to 0
    while j < list.length(queue):
        create queue_item as Object
        set queue_item to queue[j]
        create update_id as String
        set update_id to queue_item["update_id"]

        io.print("Processing update: " + update_id)

        # Download update
        create download_success as Boolean
        set download_success to download_update(ota_manager, update_id)

        if download_success:
            # Monitor download progress
            while get_download_progress(ota_manager, update_id) < 1.0:
                create progress as Float
                set progress to get_download_progress(ota_manager, update_id)
                io.print("Download progress: " + string.format(progress * 100) + "%")
                delay(1000)
            end

            io.print("Download completed")

            # Verify update
            create verification_success as Boolean
            set verification_success to verify_update(ota_manager, update_id)

            if verification_success:
                io.print("Update verification successful")

                # Create backup before installation
                create_backup_before_update(ota_manager, update_id)

                # Install update
                create install_options as Object
                set install_options["reboot_after_install"] to true
                set install_options["rollback_on_failure"] to true

                create install_success as Boolean
                set install_success to install_update(ota_manager, update_id, install_options)

                if install_success:
                    io.print("Update installation successful")
                else:
                    io.print("Update installation failed")

                    # Attempt rollback
                    rollback_update(ota_manager, update_id)
                    io.print("Rolled back to previous version")
                end
            else:
                io.print("Update verification failed")
            end
        else:
            io.print("Download failed")
        end

        set j to j + 1
    end

define function delta_update_example:
    """Delta update example"""
    create ota_manager as OtaManager
    set ota_manager to create_ota_manager()

    # Create delta update from version 1.0 to 1.1
    create delta_update_id as String
    set delta_update_id to create_delta_update(ota_manager, "1.0", "1.1", "/path/to/firmware_1.1.bin")

    if delta_update_id != "":
        io.print("Delta update created: " + delta_update_id)
        io.print("Delta size: " + string.format(get_delta_update_size(ota_manager, delta_update_id)) + " bytes")

        # Apply delta update to base firmware
        create base_firmware_path as String
        set base_firmware_path to "/path/to/firmware_1.0.bin"

        create apply_success as Boolean
        set apply_success to apply_delta_update(ota_manager, delta_update_id, base_firmware_path)

        if apply_success:
            io.print("Delta update applied successfully")

            # Verify the result
            create verify_success as Boolean
            set verify_success to verify_update(ota_manager, delta_update_id)

            if verify_success:
                io.print("Delta update verification successful")

                # Install the update
                create install_options as Object
                set install_options["delta_update"] to true

                install_update(ota_manager, delta_update_id, install_options)
            end
        else:
            io.print("Failed to apply delta update")
        end
    else:
        io.print("Failed to create delta update")
    end

define function scheduled_update_example:
    """Scheduled update example"""
    create ota_manager as OtaManager
    set ota_manager to create_ota_manager()

    # Check for security updates
    create security_updates as List
    set security_updates to check_for_updates(ota_manager, UPDATE_TYPE_SECURITY)

    if list.length(security_updates) > 0:
        create security_update as Object
        set security_update to security_updates[0]

        # Schedule security update for next maintenance window
        create schedule_conditions as Object
        set schedule_conditions["maintenance_window"] to true
        set schedule_conditions["low_power_mode"] to false
        set schedule_conditions["network_available"] to true

        create schedule_success as Boolean
        set schedule_success to schedule_update(ota_manager, security_update["id"], "02:00", schedule_conditions)

        if schedule_success:
            io.print("Security update scheduled for 2:00 AM with conditions")

            # Monitor scheduled updates
            create scheduled as List
            set scheduled to get_scheduled_updates(ota_manager)

            io.print("Total scheduled updates: " + string.format(list.length(scheduled)))
        else:
            io.print("Failed to schedule security update")
        end
    else:
        io.print("No security updates available")
    end

define function deployment_management_example:
    """Deployment management example"""
    create ota_manager as OtaManager
    set ota_manager to create_ota_manager()

    # Create update for deployment
    create update_info as Object
    set update_info["type"] to UPDATE_TYPE_FIRMWARE
    set update_info["version"] to "1.2.0"
    set update_info["description"] to "Bug fixes and performance improvements"
    set update_info["source"] to SOURCE_CLOUD
    set update_info["method"] to UPDATE_METHOD_DELTA

    create update_id as String
    set update_id to create_update_package(ota_manager, update_info)

    # Define target devices
    create target_devices as List
    add "device_001" to target_devices
    add "device_002" to target_devices
    add "device_003" to target_devices

    # Configure deployment options
    create deployment_options as Object
    set deployment_options["batch_size"] to 10
    set deployment_options["delay_between_batches"] to 300
    set deployment_options["rollback_on_failure"] to true
    set deployment_options["require_confirmation"] to false

    # Deploy update to devices
    create deployment_result as Object
    set deployment_result to deploy_update_to_devices(ota_manager, update_id, target_devices, deployment_options)

    io.print("Deployment started with ID: " + deployment_result["deployment_id"])
    io.print("Target devices: " + string.format(list.length(target_devices)))

    # Monitor deployment progress
    create deployment_id as String
    set deployment_id to deployment_result["deployment_id"]

    while true:
        create status as Object
        set status to get_deployment_status(ota_manager, deployment_id)

        io.print("Deployment progress: " + string.format(status["progress"] * 100) + "%")
        io.print("Devices updated: " + string.format(status["completed"]))
        io.print("Devices failed: " + string.format(status["failed"]))

        if status["progress"] >= 1.0:
            break
        end

        delay(5000)  # Check every 5 seconds
    end

    io.print("Deployment completed")

    # Generate deployment report
    create report as String
    set report to generate_update_report(ota_manager, update_id, "deployment")

    io.print("Deployment report generated")