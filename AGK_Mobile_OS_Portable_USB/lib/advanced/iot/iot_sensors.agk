# AGK IoT Sensors and Actuators Library
# Comprehensive sensor and actuator support for IoT applications
# Supports environmental, motion, biometric, industrial, and home automation sensors

# Sensor Types
create constant SENSOR_TEMPERATURE as String = "temperature"
create constant SENSOR_HUMIDITY as String = "humidity"
create constant SENSOR_PRESSURE as String = "pressure"
create constant SENSOR_LIGHT as String = "light"
create constant SENSOR_MOTION as String = "motion"
create constant SENSOR_ACCELEROMETER as String = "accelerometer"
create constant SENSOR_GYROSCOPE as String = "gyroscope"
create constant SENSOR_MAGNETOMETER as String = "magnetometer"
create constant SENSOR_GPS as String = "gps"
create constant SENSOR_PROXIMITY as String = "proximity"
create constant SENSOR_GAS as String = "gas"
create constant SENSOR_SOUND as String = "sound"
create constant SENSOR_VIBRATION as String = "vibration"
create constant SENSOR_DISTANCE as String = "distance"
create constant SENSOR_COLOR as String = "color"
create constant SENSOR_HALL as String = "hall"
create constant SENSOR_FORCE as String = "force"
create constant SENSOR_FLEX as String = "flex"
create constant SENSOR_BIOMETRIC as String = "biometric"

# Actuator Types
create constant ACTUATOR_LED as String = "led"
create constant ACTUATOR_MOTOR as String = "motor"
create constant ACTUATOR_SERVO as String = "servo"
create constant ACTUATOR_RELAY as String = "relay"
create constant ACTUATOR_BUZZER as String = "buzzer"
create constant ACTUATOR_DISPLAY as String = "display"
create constant ACTUATOR_SOLENOID as String = "solenoid"
create constant ACTUATOR_VALVE as String = "valve"
create constant ACTUATOR_PUMP as String = "pump"
create constant ACTUATOR_HEATER as String = "heater"
create constant ACTUATOR_FAN as String = "fan"
create constant ACTUATOR_LOCK as String = "lock"

# Communication Interfaces
create constant INTERFACE_ANALOG as String = "analog"
create constant INTERFACE_DIGITAL as String = "digital"
create constant INTERFACE_I2C as String = "i2c"
create constant INTERFACE_SPI as String = "spi"
create constant INTERFACE_UART as String = "uart"
create constant INTERFACE_ONEWIRE as String = "onewire"
create constant INTERFACE_CAN as String = "can"

# Sensor Configuration
define function create_sensor(type as String, interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create IoT sensor instance"""
    external function sensor_create(type as String, iface as String, addr as Integer, pin as Integer) from "iot_sensors.so" as pointer
    create sensor as IoTSensor
    set sensor["type"] to type
    set sensor["interface"] to interface
    set sensor["address"] to address
    set sensor["pin"] to pin
    set sensor["initialized"] to true
    set sensor["enabled"] to false
    return sensor

define function init_sensor(sensor as IoTSensor) as Boolean:
    """Initialize sensor hardware"""
    external function sensor_init(handle as pointer) from "iot_sensors.so" as Boolean
    return sensor_init(sensor["handle"])

define function enable_sensor(sensor as IoTSensor) as Boolean:
    """Enable sensor for reading"""
    external function sensor_enable(handle as pointer) from "iot_sensors.so" as Boolean
    set sensor["enabled"] to sensor_enable(sensor["handle"])
    return sensor["enabled"]

define function disable_sensor(sensor as IoTSensor) as Boolean:
    """Disable sensor"""
    external function sensor_disable(handle as pointer) from "iot_sensors.so" as Boolean
    set sensor["enabled"] to !sensor_disable(sensor["handle"])
    return !sensor["enabled"]

define function read_sensor(sensor as IoTSensor) as SensorData:
    """Read sensor data"""
    external function sensor_read(handle as pointer) from "iot_sensors.so" as pointer
    create data as SensorData
    # Implementation would populate data based on sensor type
    return data

define function calibrate_sensor(sensor as IoTSensor, calibration_data as Object) as Boolean:
    """Calibrate sensor"""
    external function sensor_calibrate(handle as pointer, cal_data as pointer) from "iot_sensors.so" as Boolean
    return sensor_calibrate(sensor["handle"], calibration_data)

define function get_sensor_info(sensor as IoTSensor) as Object:
    """Get sensor information"""
    create info as Object
    set info["type"] to sensor["type"]
    set info["interface"] to sensor["interface"]
    set info["address"] to sensor["address"]
    set info["pin"] to sensor["pin"]
    set info["enabled"] to sensor["enabled"]
    return info

# Actuator Configuration
define function create_actuator(type as String, interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create IoT actuator instance"""
    external function actuator_create(type as String, iface as String, addr as Integer, pin as Integer) from "iot_sensors.so" as pointer
    create actuator as IoTActuator
    set actuator["type"] to type
    set actuator["interface"] to interface
    set actuator["address"] to address
    set actuator["pin"] to pin
    set actuator["initialized"] to true
    set actuator["state"] to false
    return actuator

define function init_actuator(actuator as IoTActuator) as Boolean:
    """Initialize actuator hardware"""
    external function actuator_init(handle as pointer) from "iot_sensors.so" as Boolean
    return actuator_init(actuator["handle"])

define function control_actuator(actuator as IoTActuator, command as String, parameters as Object) as Boolean:
    """Send control command to actuator"""
    external function actuator_control(handle as pointer, cmd as String, params as pointer) from "iot_sensors.so" as Boolean
    return actuator_control(actuator["handle"], command, parameters)

define function set_actuator_state(actuator as IoTActuator, state as Boolean) as Boolean:
    """Set actuator on/off state"""
    external function actuator_set_state(handle as pointer, state as Boolean) from "iot_sensors.so" as Boolean
    set actuator["state"] to state
    return actuator_set_state(actuator["handle"], state)

define function get_actuator_state(actuator as IoTActuator) as Boolean:
    """Get actuator current state"""
    external function actuator_get_state(handle as pointer) from "iot_sensors.so" as Boolean
    return actuator_get_state(actuator["handle"])

# Environmental Sensors
define function create_temperature_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create temperature sensor (DHT11, DHT22, DS18B20, TMP117, etc.)"""
    return create_sensor(SENSOR_TEMPERATURE, interface, address, pin)

define function create_humidity_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create humidity sensor (DHT11, DHT22, HDC1080, SHT30, etc.)"""
    return create_sensor(SENSOR_HUMIDITY, interface, address, pin)

define function create_pressure_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create pressure sensor (BMP180, BMP280, BME280, MS5611, etc.)"""
    return create_sensor(SENSOR_PRESSURE, interface, address, pin)

define function create_light_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create light sensor (LDR, TSL2561, BH1750, VEML6075, etc.)"""
    return create_sensor(SENSOR_LIGHT, interface, address, pin)

define function create_gas_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create gas sensor (MQ-2, MQ-135, CCS811, etc.)"""
    return create_sensor(SENSOR_GAS, interface, address, pin)

# Motion and Position Sensors
define function create_accelerometer(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create accelerometer (MPU6050, ADXL345, LSM6DS3, etc.)"""
    return create_sensor(SENSOR_ACCELEROMETER, interface, address, pin)

define function create_gyroscope(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create gyroscope (MPU6050, L3GD20, etc.)"""
    return create_sensor(SENSOR_GYROSCOPE, interface, address, pin)

define function create_magnetometer(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create magnetometer (HMC5883L, QMC5883L, etc.)"""
    return create_sensor(SENSOR_MAGNETOMETER, interface, address, pin)

define function create_gps_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create GPS sensor (NEO-6M, etc.)"""
    return create_sensor(SENSOR_GPS, interface, address, pin)

define function create_distance_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create distance sensor (HC-SR04, VL53L0X, JSN-SR04T, etc.)"""
    return create_sensor(SENSOR_DISTANCE, interface, address, pin)

define function create_proximity_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create proximity sensor (APDS9960, etc.)"""
    return create_sensor(SENSOR_PROXIMITY, interface, address, pin)

# Specialized Sensors
define function create_sound_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create sound sensor (KY-037, MAX9814, etc.)"""
    return create_sensor(SENSOR_SOUND, interface, address, pin)

define function create_vibration_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create vibration sensor (SW-420, etc.)"""
    return create_sensor(SENSOR_VIBRATION, interface, address, pin)

define function create_color_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create color sensor (TCS34725, etc.)"""
    return create_sensor(SENSOR_COLOR, interface, address, pin)

define function create_hall_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create Hall effect sensor"""
    return create_sensor(SENSOR_HALL, interface, address, pin)

define function create_force_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create force/pressure sensor (FSR, Load Cell, etc.)"""
    return create_sensor(SENSOR_FORCE, interface, address, pin)

define function create_flex_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create flex sensor"""
    return create_sensor(SENSOR_FLEX, interface, address, pin)

# Biometric Sensors
define function create_biometric_sensor(interface as String, address as Integer, pin as Integer) as IoTSensor:
    """Create biometric sensor (heart rate, SpO2, etc.)"""
    return create_sensor(SENSOR_BIOMETRIC, interface, address, pin)

# Actuators
define function create_led_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create LED actuator"""
    return create_actuator(ACTUATOR_LED, interface, address, pin)

define function create_motor_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create motor actuator (DC motor, stepper motor)"""
    return create_actuator(ACTUATOR_MOTOR, interface, address, pin)

define function create_servo_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create servo motor actuator"""
    return create_actuator(ACTUATOR_SERVO, interface, address, pin)

define function create_relay_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create relay actuator"""
    return create_actuator(ACTUATOR_RELAY, interface, address, pin)

define function create_buzzer_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create buzzer actuator"""
    return create_actuator(ACTUATOR_BUZZER, interface, address, pin)

define function create_display_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create display actuator (LCD, OLED, etc.)"""
    return create_actuator(ACTUATOR_DISPLAY, interface, address, pin)

define function create_solenoid_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create solenoid actuator"""
    return create_actuator(ACTUATOR_SOLENOID, interface, address, pin)

define function create_valve_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create valve actuator"""
    return create_actuator(ACTUATOR_VALVE, interface, address, pin)

define function create_pump_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create pump actuator"""
    return create_actuator(ACTUATOR_PUMP, interface, address, pin)

define function create_heater_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create heater actuator"""
    return create_actuator(ACTUATOR_HEATER, interface, address, pin)

define function create_fan_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create fan actuator"""
    return create_actuator(ACTUATOR_FAN, interface, address, pin)

define function create_lock_actuator(interface as String, address as Integer, pin as Integer) as IoTActuator:
    """Create electronic lock actuator"""
    return create_actuator(ACTUATOR_LOCK, interface, address, pin)

# Sensor Data Processing Functions
define function get_temperature_value(sensor_data as SensorData) as Float:
    """Extract temperature value from sensor data"""
    if sensor_data["type"] == SENSOR_TEMPERATURE:
        return sensor_data["temperature"]
    else:
        return 0.0

define function get_humidity_value(sensor_data as SensorData) as Float:
    """Extract humidity value from sensor data"""
    if sensor_data["type"] == SENSOR_HUMIDITY:
        return sensor_data["humidity"]
    else:
        return 0.0

define function get_pressure_value(sensor_data as SensorData) as Float:
    """Extract pressure value from sensor data"""
    if sensor_data["type"] == SENSOR_PRESSURE:
        return sensor_data["pressure"]
    else:
        return 0.0

define function get_accelerometer_values(sensor_data as SensorData) as Object:
    """Extract accelerometer values (x, y, z) from sensor data"""
    create values as Object
    if sensor_data["type"] == SENSOR_ACCELEROMETER:
        set values["x"] to sensor_data["x"]
        set values["y"] to sensor_data["y"]
        set values["z"] to sensor_data["z"]
    else:
        set values["x"] to 0.0
        set values["y"] to 0.0
        set values["z"] to 0.0
    return values

define function get_gyroscope_values(sensor_data as SensorData) as Object:
    """Extract gyroscope values (x, y, z) from sensor data"""
    create values as Object
    if sensor_data["type"] == SENSOR_GYROSCOPE:
        set values["x"] to sensor_data["x"]
        set values["y"] to sensor_data["y"]
        set values["z"] to sensor_data["z"]
    else:
        set values["x"] to 0.0
        set values["y"] to 0.0
        set values["z"] to 0.0
    return values

define function get_gps_coordinates(sensor_data as SensorData) as Object:
    """Extract GPS coordinates from sensor data"""
    create coords as Object
    if sensor_data["type"] == SENSOR_GPS:
        set coords["latitude"] to sensor_data["latitude"]
        set coords["longitude"] to sensor_data["longitude"]
        set coords["altitude"] to sensor_data["altitude"]
        set coords["satellites"] to sensor_data["satellites"]
    else:
        set coords["latitude"] to 0.0
        set coords["longitude"] to 0.0
        set coords["altitude"] to 0.0
        set coords["satellites"] to 0
    return coords

define function get_distance_value(sensor_data as SensorData) as Float:
    """Extract distance value from sensor data"""
    if sensor_data["type"] == SENSOR_DISTANCE:
        return sensor_data["distance"]
    else:
        return 0.0

define function get_light_value(sensor_data as SensorData) as Float:
    """Extract light intensity value from sensor data"""
    if sensor_data["type"] == SENSOR_LIGHT:
        return sensor_data["light"]
    else:
        return 0.0

# Actuator Control Functions
define function set_led_brightness(actuator as IoTActuator, brightness as Integer) as Boolean:
    """Set LED brightness (0-255)"""
    if actuator["type"] == ACTUATOR_LED:
        create params as Object
        set params["brightness"] to brightness
        return control_actuator(actuator, "set_brightness", params)
    else:
        return false

define function set_motor_speed(actuator as IoTActuator, speed as Integer, direction as String) as Boolean:
    """Set motor speed and direction"""
    if actuator["type"] == ACTUATOR_MOTOR:
        create params as Object
        set params["speed"] to speed
        set params["direction"] to direction
        return control_actuator(actuator, "set_speed", params)
    else:
        return false

define function set_servo_angle(actuator as IoTActuator, angle as Integer) as Boolean:
    """Set servo motor angle (0-180)"""
    if actuator["type"] == ACTUATOR_SERVO:
        create params as Object
        set params["angle"] to angle
        return control_actuator(actuator, "set_angle", params)
    else:
        return false

define function set_buzzer_frequency(actuator as IoTActuator, frequency as Integer, duration as Integer) as Boolean:
    """Set buzzer frequency and duration"""
    if actuator["type"] == ACTUATOR_BUZZER:
        create params as Object
        set params["frequency"] to frequency
        set params["duration"] to duration
        return control_actuator(actuator, "set_frequency", params)
    else:
        return false

define function set_display_text(actuator as IoTActuator, text as String, line as Integer) as Boolean:
    """Set display text"""
    if actuator["type"] == ACTUATOR_DISPLAY:
        create params as Object
        set params["text"] to text
        set params["line"] to line
        return control_actuator(actuator, "set_text", params)
    else:
        return false

# Multi-Sensor Management
define function create_sensor_array() as SensorArray:
    """Create sensor array for managing multiple sensors"""
    create array as SensorArray
    set array["sensors"] to []
    set array["count"] to 0
    return array

define function add_sensor_to_array(array as SensorArray, sensor as IoTSensor) as Boolean:
    """Add sensor to sensor array"""
    add sensor to array["sensors"]
    set array["count"] to array["count"] + 1
    return true

define function read_all_sensors(array as SensorArray) as List:
    """Read data from all sensors in array"""
    create all_data as List
    create i as Integer
    set i to 0
    while i < array["count"]:
        create sensor as IoTSensor
        set sensor to array["sensors"][i]
        create data as SensorData
        set data to read_sensor(sensor)
        add data to all_data
        set i to i + 1
    return all_data

define function enable_all_sensors(array as SensorArray) as Boolean:
    """Enable all sensors in array"""
    create success as Boolean
    set success to true
    create i as Integer
    set i to 0
    while i < array["count"]:
        create sensor as IoTSensor
        set sensor to array["sensors"][i]
        set success to success and enable_sensor(sensor)
        set i to i + 1
    return success

define function disable_all_sensors(array as SensorArray) as Boolean:
    """Disable all sensors in array"""
    create success as Boolean
    set success to true
    create i as Integer
    set i to 0
    while i < array["count"]:
        create sensor as IoTSensor
        set sensor to array["sensors"][i]
        set success to success and disable_sensor(sensor)
        set i to i + 1
    return success

# Sensor Fusion Functions
define function calculate_imu_orientation(accel_data as SensorData, gyro_data as SensorData, mag_data as SensorData) as Object:
    """Calculate device orientation using IMU sensor fusion"""
    create orientation as Object
    # Implementation would use sensor fusion algorithms
    set orientation["roll"] to 0.0
    set orientation["pitch"] to 0.0
    set orientation["yaw"] to 0.0
    return orientation

define function calculate_altitude(pressure_data as SensorData, temperature_data as SensorData) as Float:
    """Calculate altitude from pressure and temperature"""
    if pressure_data["type"] == SENSOR_PRESSURE and temperature_data["type"] == SENSOR_TEMPERATURE:
        # Barometric formula implementation
        create pressure as Float
        set pressure to pressure_data["pressure"]
        create temperature as Float
        set temperature to temperature_data["temperature"]
        # Simplified calculation
        return (1.0 - math.pow(pressure / 1013.25, 0.190263)) * 44330.8
    else:
        return 0.0

# Data Conversion Functions
define function celsius_to_fahrenheit(celsius as Float) as Float:
    """Convert Celsius to Fahrenheit"""
    return (celsius * 9.0 / 5.0) + 32.0

define function fahrenheit_to_celsius(fahrenheit as Float) as Float:
    """Convert Fahrenheit to Celsius"""
    return (fahrenheit - 32.0) * 5.0 / 9.0

define function pascal_to_hectopascal(pascal as Float) as Float:
    """Convert Pascal to hPa"""
    return pascal / 100.0

define function lux_to_footcandles(lux as Float) as Float:
    """Convert Lux to Foot-candles"""
    return lux * 0.092903

# Error Handling
define function get_sensor_error(sensor as IoTSensor) as String:
    """Get sensor error message"""
    external function sensor_get_error(handle as pointer) from "iot_sensors.so" as String
    return sensor_get_error(sensor["handle"])

define function get_actuator_error(actuator as IoTActuator) as String:
    """Get actuator error message"""
    external function actuator_get_error(handle as pointer) from "iot_sensors.so" as String
    return actuator_get_error(actuator["handle"])

define function clear_sensor_error(sensor as IoTSensor) as void:
    """Clear sensor error"""
    external function sensor_clear_error(handle as pointer) from "iot_sensors.so" as void
    sensor_clear_error(sensor["handle"])

define function clear_actuator_error(actuator as IoTActuator) as void:
    """Clear actuator error"""
    external function actuator_clear_error(handle as pointer) from "iot_sensors.so" as void
    actuator_clear_error(actuator["handle"])

# Example Usage
define function environmental_monitoring_example:
    """Environmental monitoring example"""
    # Create temperature sensor
    create temp_sensor as IoTSensor
    set temp_sensor to create_temperature_sensor(INTERFACE_I2C, 0x48, 0)

    # Create humidity sensor
    create hum_sensor as IoTSensor
    set hum_sensor to create_humidity_sensor(INTERFACE_I2C, 0x44, 0)

    # Initialize sensors
    init_sensor(temp_sensor)
    init_sensor(hum_sensor)

    # Enable sensors
    enable_sensor(temp_sensor)
    enable_sensor(hum_sensor)

    # Read data
    create temp_data as SensorData
    set temp_data to read_sensor(temp_sensor)
    create temp as Float
    set temp to get_temperature_value(temp_data)

    create hum_data as SensorData
    set hum_data to read_sensor(hum_sensor)
    create hum as Float
    set hum to get_humidity_value(hum_data)

    io.print("Temperature: " + string.format(temp) + "°C")
    io.print("Humidity: " + string.format(hum) + "%")

define function motion_tracking_example:
    """Motion tracking example"""
    # Create IMU sensors
    create accel_sensor as IoTSensor
    set accel_sensor to create_accelerometer(INTERFACE_I2C, 0x68, 0)

    create gyro_sensor as IoTSensor
    set gyro_sensor to create_gyroscope(INTERFACE_I2C, 0x68, 0)

    # Initialize and enable sensors
    init_sensor(accel_sensor)
    init_sensor(gyro_sensor)
    enable_sensor(accel_sensor)
    enable_sensor(gyro_sensor)

    # Read motion data
    create accel_data as SensorData
    set accel_data to read_sensor(accel_sensor)
    create accel_values as Object
    set accel_values to get_accelerometer_values(accel_data)

    create gyro_data as SensorData
    set gyro_data to read_sensor(gyro_sensor)
    create gyro_values as Object
    set gyro_values to get_gyroscope_values(gyro_data)

    io.print("Acceleration - X: " + string.format(accel_values["x"]) + ", Y: " + string.format(accel_values["y"]) + ", Z: " + string.format(accel_values["z"]))
    io.print("Gyroscope - X: " + string.format(gyro_values["x"]) + ", Y: " + string.format(gyro_values["y"]) + ", Z: " + string.format(gyro_values["z"]))

define function actuator_control_example:
    """Actuator control example"""
    # Create LED actuator
    create led_actuator as IoTActuator
    set led_actuator to create_led_actuator(INTERFACE_DIGITAL, 0, 13)

    # Create servo actuator
    create servo_actuator as IoTActuator
    set servo_actuator to create_servo_actuator(INTERFACE_DIGITAL, 0, 9)

    # Initialize actuators
    init_actuator(led_actuator)
    init_actuator(servo_actuator)

    # Control LED
    set_actuator_state(led_actuator, true)
    set_led_brightness(led_actuator, 128)

    # Control servo
    set_servo_angle(servo_actuator, 90)

    io.print("LED and servo controlled")

define function home_automation_example:
    """Home automation example with sensors and actuators"""
    # Create sensors
    create light_sensor as IoTSensor
    set light_sensor to create_light_sensor(INTERFACE_ANALOG, 0, A0)

    create motion_sensor as IoTSensor
    set motion_sensor to create_distance_sensor(INTERFACE_DIGITAL, 0, 7)

    # Create actuators
    create led_actuator as IoTActuator
    set led_actuator to create_led_actuator(INTERFACE_DIGITAL, 0, 13)

    # Initialize all devices
    init_sensor(light_sensor)
    init_sensor(motion_sensor)
    init_actuator(led_actuator)

    enable_sensor(light_sensor)
    enable_sensor(motion_sensor)

    # Main automation loop
    while true:
        create light_data as SensorData
        set light_data to read_sensor(light_sensor)
        create light_level as Float
        set light_level to get_light_value(light_data)

        create motion_data as SensorData
        set motion_data to read_sensor(motion_sensor)
        create distance as Float
        set distance to get_distance_value(motion_data)

        # If dark and motion detected, turn on LED
        if light_level < 100.0 and distance < 50.0:
            set_actuator_state(led_actuator, true)
            io.print("Motion detected in dark - LED ON")
        else:
            set_actuator_state(led_actuator, false)

        delay(1000)