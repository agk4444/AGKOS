# AGK Automotive Platform Hardware Access Library
# Provides automotive-specific hardware access and vehicle management
# Supports infotainment systems, ADAS, and vehicle control systems

# Vehicle Information
define function get_vehicle_make() as String:
    """Get vehicle make"""
    external function automotive_get_vehicle_make() from "automotive.so" as String
    return automotive_get_vehicle_make()

define function get_vehicle_model() as String:
    """Get vehicle model"""
    external function automotive_get_vehicle_model() from "automotive.so" as String
    return automotive_get_vehicle_model()

define function get_vehicle_year() as Integer:
    """Get vehicle year"""
    external function automotive_get_vehicle_year() from "automotive.so" as Integer
    return automotive_get_vehicle_year()

define function get_vehicle_vin() as String:
    """Get vehicle VIN"""
    external function automotive_get_vehicle_vin() from "automotive.so" as String
    return automotive_get_vehicle_vin()

define function get_vehicle_odometer() as Integer:
    """Get vehicle odometer in miles/km"""
    external function automotive_get_vehicle_odometer() from "automotive.so" as Integer
    return automotive_get_vehicle_odometer()

define function get_fuel_level() as Float:
    """Get fuel level (0.0 to 1.0)"""
    external function automotive_get_fuel_level() from "automotive.so" as Float
    return automotive_get_fuel_level()

define function get_fuel_range() as Integer:
    """Get estimated fuel range in miles/km"""
    external function automotive_get_fuel_range() from "automotive.so" as Integer
    return automotive_get_fuel_range()

# Engine and Performance
define function get_engine_rpm() as Integer:
    """Get engine RPM"""
    external function automotive_get_engine_rpm() from "automotive.so" as Integer
    return automotive_get_engine_rpm()

define function get_engine_temperature() as Float:
    """Get engine temperature in Celsius"""
    external function automotive_get_engine_temperature() from "automotive.so" as Float
    return automotive_get_engine_temperature()

define function get_engine_oil_level() as Float:
    """Get engine oil level (0.0 to 1.0)"""
    external function automotive_get_engine_oil_level() from "automotive.so" as Float
    return automotive_get_engine_oil_level()

define function get_engine_oil_temperature() as Float:
    """Get engine oil temperature in Celsius"""
    external function automotive_get_engine_oil_temperature() from "automotive.so" as Float
    return automotive_get_engine_oil_temperature()

define function get_transmission_temperature() as Float:
    """Get transmission temperature in Celsius"""
    external function automotive_get_transmission_temperature() from "automotive.so" as Float
    return automotive_get_transmission_temperature()

# Vehicle Dynamics
define function get_vehicle_speed() as Float:
    """Get vehicle speed in mph/kmh"""
    external function automotive_get_vehicle_speed() from "automotive.so" as Float
    return automotive_get_vehicle_speed()

define function get_engine_torque() as Float:
    """Get engine torque in ft-lbs/Nm"""
    external function automotive_get_engine_torque() from "automotive.so" as Float
    return automotive_get_engine_torque()

define function get_engine_power() as Float:
    """Get engine power in horsepower/kW"""
    external function automotive_get_engine_power() from "automotive.so" as Float
    return automotive_get_engine_power()

define function get_acceleration() as List:
    """Get vehicle acceleration [x, y, z] in m/sÂ²"""
    external function automotive_get_acceleration() from "automotive.so" as pointer
    return automotive_get_acceleration()

define function get_gyroscope() as List:
    """Get vehicle gyroscope data [x, y, z] in rad/s"""
    external function automotive_get_gyroscope() from "automotive.so" as pointer
    return automotive_get_gyroscope()

# ADAS - Advanced Driver Assistance Systems
define function start_adaptive_cruise_control() as Integer:
    """Start adaptive cruise control and return session ID"""
    external function automotive_start_adaptive_cruise_control() from "automotive.so" as Integer
    return automotive_start_adaptive_cruise_control()

define function stop_adaptive_cruise_control(session_id as Integer) as void:
    """Stop adaptive cruise control"""
    external function automotive_stop_adaptive_cruise_control(id as Integer) from "automotive.so" as void
    automotive_stop_adaptive_cruise_control(session_id)

define function set_cruise_speed(speed as Float) as void:
    """Set cruise control speed"""
    external function automotive_set_cruise_speed(s as Float) from "automotive.so" as void
    automotive_set_cruise_speed(speed)

define function get_following_distance() as Float:
    """Get distance to vehicle ahead in meters"""
    external function automotive_get_following_distance() from "automotive.so" as Float
    return automotive_get_following_distance()

define function start_lane_keeping_assist() as Integer:
    """Start lane keeping assist and return session ID"""
    external function automotive_start_lane_keeping_assist() from "automotive.so" as Integer
    return automotive_start_lane_keeping_assist()

define function stop_lane_keeping_assist(session_id as Integer) as void:
    """Stop lane keeping assist"""
    external function automotive_stop_lane_keeping_assist(id as Integer) from "automotive.so" as void
    automotive_stop_lane_keeping_assist(session_id)

define function get_lane_position() as Float:
    """Get lane position (-1.0 to 1.0, 0 is center)"""
    external function automotive_get_lane_position() from "automotive.so" as Float
    return automotive_get_lane_position()

define function start_blind_spot_monitoring() as Integer:
    """Start blind spot monitoring and return session ID"""
    external function automotive_start_blind_spot_monitoring() from "automotive.so" as Integer
    return automotive_start_blind_spot_monitoring()

define function stop_blind_spot_monitoring(session_id as Integer) as void:
    """Stop blind spot monitoring"""
    external function automotive_stop_blind_spot_monitoring(id as Integer) from "automotive.so" as void
    automotive_stop_blind_spot_monitoring(session_id)

define function is_blind_spot_detected(side as String) as Boolean:
    """Check if vehicle detected in blind spot"""
    external function automotive_is_blind_spot_detected(s as String) from "automotive.so" as Boolean
    return automotive_is_blind_spot_detected(side)

define function start_forward_collision_warning() as Integer:
    """Start forward collision warning and return session ID"""
    external function automotive_start_forward_collision_warning() from "automotive.so" as Integer
    return automotive_start_forward_collision_warning()

define function stop_forward_collision_warning(session_id as Integer) as void:
    """Stop forward collision warning"""
    external function automotive_stop_forward_collision_warning(id as Integer) from "automotive.so" as void
    automotive_stop_forward_collision_warning(session_id)

define function get_time_to_collision() as Float:
    """Get time to collision in seconds"""
    external function automotive_get_time_to_collision() from "automotive.so" as Float
    return automotive_get_time_to_collision()

define function start_automatic_emergency_braking() as Integer:
    """Start automatic emergency braking and return session ID"""
    external function automotive_start_automatic_emergency_braking() from "automotive.so" as Integer
    return automotive_start_automatic_emergency_braking()

define function stop_automatic_emergency_braking(session_id as Integer) as void:
    """Stop automatic emergency braking"""
    external function automotive_stop_automatic_emergency_braking(id as Integer) from "automotive.so" as void
    automotive_stop_automatic_emergency_braking(session_id)

define function start_pedestrian_detection() as Integer:
    """Start pedestrian detection and return session ID"""
    external function automotive_start_pedestrian_detection() from "automotive.so" as Integer
    return automotive_start_pedestrian_detection()

define function stop_pedestrian_detection(session_id as Integer) as void:
    """Stop pedestrian detection"""
    external function automotive_stop_pedestrian_detection(id as Integer) from "automotive.so" as void
    automotive_stop_pedestrian_detection(session_id)

define function get_detected_pedestrians() as List:
    """Get list of detected pedestrians with positions"""
    external function automotive_get_detected_pedestrians() from "automotive.so" as pointer
    return automotive_get_detected_pedestrians()

# Navigation and Maps
define function start_navigation() as Integer:
    """Start navigation system and return session ID"""
    external function automotive_start_navigation() from "automotive.so" as Integer
    return automotive_start_navigation()

define function stop_navigation(session_id as Integer) as void:
    """Stop navigation system"""
    external function automotive_stop_navigation(id as Integer) from "automotive.so" as void
    automotive_stop_navigation(session_id)

define function set_destination(latitude as Float, longitude as Float) as void:
    """Set navigation destination"""
    external function automotive_set_destination(lat as Float, lon as Float) from "automotive.so" as void
    automotive_set_destination(latitude, longitude)

define function set_destination_address(address as String) as void:
    """Set navigation destination by address"""
    external function automotive_set_destination_address(addr as String) from "automotive.so" as void
    automotive_set_destination_address(address)

define function get_current_location() as List:
    """Get current GPS location [latitude, longitude]"""
    external function automotive_get_current_location() from "automotive.so" as pointer
    return automotive_get_current_location()

define function get_navigation_instructions() as List:
    """Get current navigation instructions"""
    external function automotive_get_navigation_instructions() from "automotive.so" as pointer
    return automotive_get_navigation_instructions()

define function get_distance_to_destination() as Float:
    """Get distance to destination in miles/km"""
    external function automotive_get_distance_to_destination() from "automotive.so" as Float
    return automotive_get_distance_to_destination()

define function get_estimated_time_of_arrival() as String:
    """Get estimated time of arrival"""
    external function automotive_get_estimated_time_of_arrival() from "automotive.so" as String
    return automotive_get_estimated_time_of_arrival()

# Infotainment System
define function play_audio_file(file_path as String) as void:
    """Play audio file"""
    external function automotive_play_audio_file(path as String) from "automotive.so" as void
    automotive_play_audio_file(file_path)

define function pause_audio() as void:
    """Pause current audio"""
    external function automotive_pause_audio() from "automotive.so" as void
    automotive_pause_audio()

define function stop_audio() as void:
    """Stop current audio"""
    external function automotive_stop_audio() from "automotive.so" as void
    automotive_stop_audio()

define function set_audio_volume(level as Float) as void:
    """Set audio volume (0.0 to 1.0)"""
    external function automotive_set_audio_volume(lvl as Float) from "automotive.so" as void
    automotive_set_audio_volume(level)

define function get_audio_volume() as Float:
    """Get current audio volume (0.0 to 1.0)"""
    external function automotive_get_audio_volume() from "automotive.so" as Float
    return automotive_get_audio_volume()

define function next_track() as void:
    """Skip to next track"""
    external function automotive_next_track() from "automotive.so" as void
    automotive_next_track()

define function previous_track() as void:
    """Go to previous track"""
    external function automotive_previous_track() from "automotive.so" as void
    automotive_previous_track()

define function set_audio_source(source as String) as void:
    """Set audio source (radio, bluetooth, usb, etc.)"""
    external function automotive_set_audio_source(src as String) from "automotive.so" as void
    automotive_set_audio_source(source)

define function get_current_audio_source() as String:
    """Get current audio source"""
    external function automotive_get_current_audio_source() from "automotive.so" as String
    return automotive_get_current_audio_source()

# Radio Functions
define function tune_radio(frequency as Float) as void:
    """Tune radio to frequency"""
    external function automotive_tune_radio(freq as Float) from "automotive.so" as void
    automotive_tune_radio(frequency)

define function get_radio_frequency() as Float:
    """Get current radio frequency"""
    external function automotive_get_radio_frequency() from "automotive.so" as Float
    return automotive_get_radio_frequency()

define function scan_radio_up() as void:
    """Scan radio frequencies up"""
    external function automotive_scan_radio_up() from "automotive.so" as void
    automotive_scan_radio_up()

define function scan_radio_down() as void:
    """Scan radio frequencies down"""
    external function automotive_scan_radio_down() from "automotive.so" as void
    automotive_scan_radio_down()

define function save_radio_preset(preset_number as Integer) as void:
    """Save current radio frequency to preset"""
    external function automotive_save_radio_preset(num as Integer) from "automotive.so" as void
    automotive_save_radio_preset(preset_number)

define function load_radio_preset(preset_number as Integer) as void:
    """Load radio frequency from preset"""
    external function automotive_load_radio_preset(num as Integer) from "automotive.so" as void
    automotive_load_radio_preset(preset_number)

# Phone Integration
define function connect_phone() as Boolean:
    """Connect phone via Bluetooth/CarPlay/Android Auto"""
    external function automotive_connect_phone() from "automotive.so" as Boolean
    return automotive_connect_phone()

define function disconnect_phone() as void:
    """Disconnect phone"""
    external function automotive_disconnect_phone() from "automotive.so" as void
    automotive_disconnect_phone()

define function is_phone_connected() as Boolean:
    """Check if phone is connected"""
    external function automotive_is_phone_connected() from "automotive.so" as Boolean
    return automotive_is_phone_connected()

define function get_phone_battery_level() as Float:
    """Get connected phone battery level"""
    external function automotive_get_phone_battery_level() from "automotive.so" as Float
    return automotive_get_phone_battery_level()

define function make_phone_call(number as String) as void:
    """Make phone call"""
    external function automotive_make_phone_call(num as String) from "automotive.so" as void
    automotive_make_phone_call(number)

define function answer_phone_call() as void:
    """Answer incoming phone call"""
    external function automotive_answer_phone_call() from "automotive.so" as void
    automotive_answer_phone_call()

define function hang_up_phone_call() as void:
    """Hang up current phone call"""
    external function automotive_hang_up_phone_call() from "automotive.so" as void
    automotive_hang_up_phone_call()

# Climate Control
define function set_temperature(driver_temp as Float, passenger_temp as Float) as void:
    """Set climate control temperature for driver and passenger"""
    external function automotive_set_temperature(driver as Float, passenger as Float) from "automotive.so" as void
    automotive_set_temperature(driver_temp, passenger_temp)

define function get_temperature() as List:
    """Get current climate control temperatures [driver, passenger]"""
    external function automotive_get_temperature() from "automotive.so" as pointer
    return automotive_get_temperature()

define function set_fan_speed(speed as Integer) as void:
    """Set climate control fan speed (0-10)"""
    external function automotive_set_fan_speed(s as Integer) from "automotive.so" as void
    automotive_set_fan_speed(speed)

define function get_fan_speed() as Integer:
    """Get current fan speed"""
    external function automotive_get_fan_speed() from "automotive.so" as Integer
    return automotive_get_fan_speed()

define function set_airflow_direction(direction as String) as void:
    """Set airflow direction (dashboard, floor, windshield, etc.)"""
    external function automotive_set_airflow_direction(dir as String) from "automotive.so" as void
    automotive_set_airflow_direction(direction)

define function enable_air_conditioning() as void:
    """Enable air conditioning"""
    external function automotive_enable_air_conditioning() from "automotive.so" as void
    automotive_enable_air_conditioning()

define function disable_air_conditioning() as void:
    """Disable air conditioning"""
    external function automotive_disable_air_conditioning() from "automotive.so" as void
    automotive_disable_air_conditioning()

define function enable_heated_seats() as void:
    """Enable heated seats"""
    external function automotive_enable_heated_seats() from "automotive.so" as void
    automotive_enable_heated_seats()

define function disable_heated_seats() as void:
    """Disable heated seats"""
    external function automotive_disable_heated_seats() from "automotive.so" as void
    automotive_disable_heated_seats()

# Vehicle Controls (Limited and Safe)
define function lock_doors() as void:
    """Lock vehicle doors"""
    external function automotive_lock_doors() from "automotive.so" as void
    automotive_lock_doors()

define function unlock_doors() as void:
    """Unlock vehicle doors"""
    external function automotive_unlock_doors() from "automotive.so" as void
    automotive_unlock_doors()

define function are_doors_locked() as Boolean:
    """Check if doors are locked"""
    external function automotive_are_doors_locked() from "automotive.so" as Boolean
    return automotive_are_doors_locked()

define function open_window(window as String) as void:
    """Open specified window"""
    external function automotive_open_window(w as String) from "automotive.so" as void
    automotive_open_window(window)

define function close_window(window as String) as void:
    """Close specified window"""
    external function automotive_close_window(w as String) from "automotive.so" as void
    automotive_close_window(window)

define function get_window_position(window as String) as Float:
    """Get window position (0.0 to 1.0)"""
    external function automotive_get_window_position(w as String) from "automotive.so" as Float
    return automotive_get_window_position(window)

define function fold_mirrors() as void:
    """Fold side mirrors"""
    external function automotive_fold_mirrors() from "automotive.so" as void
    automotive_fold_mirrors()

define function unfold_mirrors() as void:
    """Unfold side mirrors"""
    external function automotive_unfold_mirrors() from "automotive.so" as void
    automotive_unfold_mirrors()

# Safety Systems
define function get_airbag_status() as String:
    """Get airbag system status"""
    external function automotive_get_airbag_status() from "automotive.so" as String
    return automotive_get_airbag_status()

define function get_brake_system_status() as String:
    """Get brake system status"""
    external function automotive_get_brake_system_status() from "automotive.so" as String
    return automotive_get_brake_system_status()

define function get_tire_pressure() as List:
    """Get tire pressure for all tires [fl, fr, rl, rr]"""
    external function automotive_get_tire_pressure() from "automotive.so" as pointer
    return automotive_get_tire_pressure()

define function get_tire_temperature() as List:
    """Get tire temperature for all tires [fl, fr, rl, rr]"""
    external function automotive_get_tire_temperature() from "automotive.so" as pointer
    return automotive_get_tire_temperature()

# Diagnostic Information
define function get_diagnostic_codes() as List:
    """Get active diagnostic trouble codes"""
    external function automotive_get_diagnostic_codes() from "automotive.so" as pointer
    return automotive_get_diagnostic_codes()

define function clear_diagnostic_codes() as void:
    """Clear diagnostic trouble codes"""
    external function automotive_clear_diagnostic_codes() from "automotive.so" as void
    automotive_clear_diagnostic_codes()

define function get_vehicle_health_report() as Object:
    """Get comprehensive vehicle health report"""
    external function automotive_get_vehicle_health_report() from "automotive.so" as pointer
    return automotive_get_vehicle_health_report()

# Constants
create constant SIDE_LEFT as String = "left"
create constant SIDE_RIGHT as String = "right"

create constant AUDIO_SOURCE_RADIO as String = "radio"
create constant AUDIO_SOURCE_BLUETOOTH as String = "bluetooth"
create constant AUDIO_SOURCE_USB as String = "usb"
create constant AUDIO_SOURCE_AUX as String = "aux"

create constant WINDOW_FRONT_LEFT as String = "front_left"
create constant WINDOW_FRONT_RIGHT as String = "front_right"
create constant WINDOW_REAR_LEFT as String = "rear_left"
create constant WINDOW_REAR_RIGHT as String = "rear_right"

create constant AIRFLOW_DASHBOARD as String = "dashboard"
create constant AIRFLOW_FLOOR as String = "floor"
create constant AIRFLOW_WINDSHIELD as String = "windshield"
create constant AIRFLOW_DEFROST as String = "defrost"

create constant SYSTEM_STATUS_OK as String = "ok"
create constant SYSTEM_STATUS_WARNING as String = "warning"
create constant SYSTEM_STATUS_ERROR as String = "error"
create constant SYSTEM_STATUS_OFFLINE as String = "offline"