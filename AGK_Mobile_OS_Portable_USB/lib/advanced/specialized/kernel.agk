# AGK Kernel Development Library
# Provides kernel-level programming interfaces for OS development

# Kernel Module Framework
define function module_init(init_function as Function) as Integer:
    """Initialize kernel module"""
    external function kernel_module_init(init as Function) from "kernel.so" as Integer
    return kernel_module_init(init_function)

define function module_exit(exit_function as Function) as Integer:
    """Cleanup kernel module"""
    external function kernel_module_exit(exit as Function) from "kernel.so" as Integer
    return kernel_module_exit(exit_function)

define function register_module(name as String, license as String) as Integer:
    """Register kernel module"""
    external function register_kernel_module(name as String, license as String) from "kernel.so" as Integer
    return register_kernel_module(name, license)

# Memory Management (Kernel)
define function kmalloc(size as Integer, flags as Integer) as pointer:
    """Kernel memory allocation"""
    external function kernel_malloc(size as Integer, flags as Integer) from "kernel.so" as pointer
    return kernel_malloc(size, flags)

define function kfree(ptr as pointer) as void:
    """Kernel memory deallocation"""
    external function kernel_free(ptr as pointer) from "kernel.so" as void
    kernel_free(ptr)

define function vmalloc(size as Integer) as pointer:
    """Virtual memory allocation"""
    external function virtual_malloc(size as Integer) from "kernel.so" as pointer
    return virtual_malloc(size)

define function vfree(ptr as pointer) as void:
    """Virtual memory deallocation"""
    external function virtual_free(ptr as pointer) from "kernel.so" as void
    virtual_free(ptr)

define function get_free_pages(order as Integer, flags as Integer) as pointer:
    """Allocate page frames"""
    external function alloc_pages(order as Integer, flags as Integer) from "kernel.so" as pointer
    return alloc_pages(order, flags)

define function free_pages(addr as pointer, order as Integer) as void:
    """Free page frames"""
    external function dealloc_pages(addr as pointer, order as Integer) from "kernel.so" as void
    dealloc_pages(addr, order)

# Kernel Synchronization
define function spin_lock_init(lock as pointer) as void:
    """Initialize spinlock"""
    external function init_spinlock(lock as pointer) from "kernel.so" as void
    init_spinlock(lock)

define function spin_lock(lock as pointer) as void:
    """Acquire spinlock"""
    external function acquire_spinlock(lock as pointer) from "kernel.so" as void
    acquire_spinlock(lock)

define function spin_unlock(lock as pointer) as void:
    """Release spinlock"""
    external function release_spinlock(lock as pointer) from "kernel.so" as void
    release_spinlock(lock)

define function spin_lock_irqsave(lock as pointer, flags as pointer) as void:
    """Acquire spinlock with interrupts disabled"""
    external function acquire_spinlock_irqsave(lock as pointer, flags as pointer) from "kernel.so" as void
    acquire_spinlock_irqsave(lock, flags)

define function spin_unlock_irqrestore(lock as pointer, flags as pointer) as void:
    """Release spinlock and restore interrupts"""
    external function release_spinlock_irqrestore(lock as pointer, flags as pointer) from "kernel.so" as void
    release_spinlock_irqrestore(lock, flags)

# Semaphores and Mutexes (Kernel)
define function sema_init(sem as pointer, value as Integer) as void:
    """Initialize semaphore"""
    external function init_semaphore(sem as pointer, val as Integer) from "kernel.so" as void
    init_semaphore(sem, value)

define function down(sem as pointer) as void:
    """Acquire semaphore (sleep if unavailable)"""
    external function semaphore_down(sem as pointer) from "kernel.so" as void
    semaphore_down(sem)

define function up(sem as pointer) as void:
    """Release semaphore"""
    external function semaphore_up(sem as pointer) from "kernel.so" as void
    semaphore_up(sem)

define function mutex_init(mutex as pointer) as void:
    """Initialize kernel mutex"""
    external function init_kernel_mutex(mtx as pointer) from "kernel.so" as void
    init_kernel_mutex(mutex)

define function mutex_lock(mutex as pointer) as void:
    """Lock kernel mutex"""
    external function lock_kernel_mutex(mtx as pointer) from "kernel.so" as void
    lock_kernel_mutex(mutex)

define function mutex_unlock(mutex as pointer) as void:
    """Unlock kernel mutex"""
    external function unlock_kernel_mutex(mtx as pointer) from "kernel.so" as void
    unlock_kernel_mutex(mutex)

# Wait Queues
define function init_waitqueue_head(wait_queue as pointer) as void:
    """Initialize wait queue head"""
    external function init_wait_queue_head(wq as pointer) from "kernel.so" as void
    init_wait_queue_head(wait_queue)

define function wait_event(wait_queue as pointer, condition as Function) as Integer:
    """Wait for event on wait queue"""
    external function wait_for_event(wq as pointer, cond as Function) from "kernel.so" as Integer
    return wait_for_event(wait_queue, condition)

define function wake_up(wait_queue as pointer) as void:
    """Wake up processes waiting on queue"""
    external function wake_up_queue(wq as pointer) from "kernel.so" as void
    wake_up_queue(wait_queue)

define function wake_up_all(wait_queue as pointer) as void:
    """Wake up all processes waiting on queue"""
    external function wake_up_all_queue(wq as pointer) from "kernel.so" as void
    wake_up_all_queue(wait_queue)

# Kernel Threads
define function kernel_thread(function as Function, data as pointer, flags as Integer) as Integer:
    """Create kernel thread"""
    external function create_kernel_thread(func as Function, data as pointer, flags as Integer) from "kernel.so" as Integer
    return create_kernel_thread(function, data, flags)

define function daemonize(name as String) as void:
    """Convert process to kernel daemon"""
    external function kernel_daemonize(name as String) from "kernel.so" as void
    kernel_daemonize(name)

# Kernel Timers
define function init_timer(timer as pointer) as void:
    """Initialize kernel timer"""
    external function init_kernel_timer(timer as pointer) from "kernel.so" as void
    init_kernel_timer(timer)

define function add_timer(timer as pointer) as void:
    """Add timer to active timers"""
    external function add_kernel_timer(timer as pointer) from "kernel.so" as void
    add_kernel_timer(timer)

define function del_timer(timer as pointer) as Integer:
    """Delete kernel timer"""
    external function delete_kernel_timer(timer as pointer) from "kernel.so" as Integer
    return delete_kernel_timer(timer)

define function mod_timer(timer as pointer, expires as Integer) as Integer:
    """Modify kernel timer"""
    external function modify_kernel_timer(timer as pointer, exp as Integer) from "kernel.so" as Integer
    return modify_kernel_timer(timer, expires)

# Tasklets
define function tasklet_init(tasklet as pointer, function as Function, data as Integer) as void:
    """Initialize tasklet"""
    external function init_tasklet(tl as pointer, func as Function, data as Integer) from "kernel.so" as void
    init_tasklet(tasklet, function, data)

define function tasklet_schedule(tasklet as pointer) as void:
    """Schedule tasklet for execution"""
    external function schedule_tasklet(tl as pointer) from "kernel.so" as void
    schedule_tasklet(tasklet)

define function tasklet_kill(tasklet as pointer) as void:
    """Kill tasklet"""
    external function kill_tasklet(tl as pointer) from "kernel.so" as void
    kill_tasklet(tasklet)

# Work Queues
define function create_workqueue(name as String) as pointer:
    """Create work queue"""
    external function create_work_queue(name as String) from "kernel.so" as pointer
    return create_work_queue(name)

define function destroy_workqueue(workqueue as pointer) as void:
    """Destroy work queue"""
    external function destroy_work_queue(wq as pointer) from "kernel.so" as void
    destroy_work_queue(workqueue)

define function queue_work(workqueue as pointer, work as pointer) as Integer:
    """Queue work for execution"""
    external function queue_work_item(wq as pointer, work as pointer) from "kernel.so" as Integer
    return queue_work_item(workqueue, work)

# Interrupt Handling
define function request_irq(irq as Integer, handler as Function, flags as Integer, name as String, dev_id as pointer) as Integer:
    """Register interrupt handler"""
    external function register_interrupt_handler(irq as Integer, hnd as Function, flags as Integer, name as String, dev as pointer) from "kernel.so" as Integer
    return register_interrupt_handler(irq, handler, flags, name, dev_id)

define function free_irq(irq as Integer, dev_id as pointer) as void:
    """Free interrupt handler"""
    external function free_interrupt_handler(irq as Integer, dev as pointer) from "kernel.so" as void
    free_interrupt_handler(irq, dev_id)

define function enable_irq(irq as Integer) as void:
    """Enable interrupt"""
    external function enable_interrupt(irq as Integer) from "kernel.so" as void
    enable_interrupt(irq)

define function disable_irq(irq as Integer) as void:
    """Disable interrupt"""
    external function disable_interrupt(irq as Integer) from "kernel.so" as void
    disable_interrupt(irq)

define function disable_irq_nosync(irq as Integer) as void:
    """Disable interrupt without synchronization"""
    external function disable_interrupt_nosync(irq as Integer) from "kernel.so" as void
    disable_interrupt_nosync(irq)

# Device I/O
define function ioport_map(start as Integer, length as Integer) as pointer:
    """Map I/O port region"""
    external function map_io_port(start as Integer, len as Integer) from "kernel.so" as pointer
    return map_io_port(start, length)

define function ioport_unmap(addr as pointer) as void:
    """Unmap I/O port region"""
    external function unmap_io_port(addr as pointer) from "kernel.so" as void
    unmap_io_port(addr)

define function ioread8(addr as pointer) as Integer:
    """Read 8-bit value from I/O port"""
    external function read_io_8(addr as pointer) from "kernel.so" as Integer
    return read_io_8(addr)

define function iowrite8(addr as pointer, value as Integer) as void:
    """Write 8-bit value to I/O port"""
    external function write_io_8(addr as pointer, val as Integer) from "kernel.so" as void
    write_io_8(addr, value)

define function ioread16(addr as pointer) as Integer:
    """Read 16-bit value from I/O port"""
    external function read_io_16(addr as pointer) from "kernel.so" as Integer
    return read_io_16(addr)

define function iowrite16(addr as pointer, value as Integer) as void:
    """Write 16-bit value to I/O port"""
    external function write_io_16(addr as pointer, val as Integer) from "kernel.so" as void
    write_io_16(addr, value)

define function ioread32(addr as pointer) as Integer:
    """Read 32-bit value from I/O port"""
    external function read_io_32(addr as pointer) from "kernel.so" as Integer
    return read_io_32(addr)

define function iowrite32(addr as pointer, value as Integer) as void:
    """Write 32-bit value to I/O port"""
    external function write_io_32(addr as pointer, val as Integer) from "kernel.so" as void
    write_io_32(addr, value)

# Memory-Mapped I/O
define function ioremap(phys_addr as Integer, size as Integer) as pointer:
    """Map physical address to virtual address"""
    external function map_io_memory(phys as Integer, size as Integer) from "kernel.so" as pointer
    return map_io_memory(phys_addr, size)

define function iounmap(addr as pointer) as void:
    """Unmap I/O memory"""
    external function unmap_io_memory(addr as pointer) from "kernel.so" as void
    unmap_io_memory(addr)

define function readb(addr as pointer) as Integer:
    """Read byte from memory-mapped I/O"""
    external function read_memory_byte(addr as pointer) from "kernel.so" as Integer
    return read_memory_byte(addr)

define function writeb(addr as pointer, value as Integer) as void:
    """Write byte to memory-mapped I/O"""
    external function write_memory_byte(addr as pointer, val as Integer) from "kernel.so" as void
    write_memory_byte(addr, value)

define function readw(addr as pointer) as Integer:
    """Read word from memory-mapped I/O"""
    external function read_memory_word(addr as pointer) from "kernel.so" as Integer
    return read_memory_word(addr)

define function writew(addr as pointer, value as Integer) as void:
    """Write word to memory-mapped I/O"""
    external function write_memory_word(addr as pointer, val as Integer) from "kernel.so" as void
    write_memory_word(addr, value)

define function readl(addr as pointer) as Integer:
    """Read long from memory-mapped I/O"""
    external function read_memory_long(addr as pointer) from "kernel.so" as Integer
    return read_memory_long(addr)

define function writel(addr as pointer, value as Integer) as void:
    """Write long to memory-mapped I/O"""
    external function write_memory_long(addr as pointer, val as Integer) from "kernel.so" as void
    write_memory_long(addr, value)

# Kernel Printing and Debugging
define function printk(level as String, format as String, arguments as List) as Integer:
    """Kernel print function"""
    external function kernel_print(level as String, fmt as String, args as pointer) from "kernel.so" as Integer
    return kernel_print(level, format, arguments)

define function dump_stack() as void:
    """Dump kernel stack"""
    external function dump_kernel_stack() from "kernel.so" as void
    dump_kernel_stack()

# Kernel Time
define function get_jiffies() as Integer:
    """Get current jiffies count"""
    external function get_kernel_jiffies() from "kernel.so" as Integer
    return get_kernel_jiffies()

define function mdelay(msecs as Integer) as void:
    """Delay execution in milliseconds"""
    external function kernel_mdelay(ms as Integer) from "kernel.so" as void
    kernel_mdelay(msecs)

define function udelay(usecs as Integer) as void:
    """Delay execution in microseconds"""
    external function kernel_udelay(us as Integer) from "kernel.so" as void
    kernel_udelay(usecs)

define function ndelay(nsecs as Integer) as void:
    """Delay execution in nanoseconds"""
    external function kernel_ndelay(ns as Integer) from "kernel.so" as void
    kernel_ndelay(nsecs)

# Kernel Constants
# Memory allocation flags
create constant GFP_KERNEL as Integer = 0x00000010
create constant GFP_ATOMIC as Integer = 0x00000020
create constant GFP_DMA as Integer = 0x00000004
create constant GFP_HIGHMEM as Integer = 0x00000002

# Interrupt flags
create constant IRQF_SHARED as Integer = 0x00000080
create constant IRQF_DISABLED as Integer = 0x00000020
create constant IRQF_SAMPLE_RANDOM as Integer = 0x00000040

# Print levels
create constant KERN_EMERG as String = "<0>"
create constant KERN_ALERT as String = "<1>"
create constant KERN_CRIT as String = "<2>"
create constant KERN_ERR as String = "<3>"
create constant KERN_WARNING as String = "<4>"
create constant KERN_NOTICE as String = "<5>"
create constant KERN_INFO as String = "<6>"
create constant KERN_DEBUG as String = "<7>"

# Common IRQs
create constant IRQ_KEYBOARD as Integer = 1
create constant IRQ_TIMER as Integer = 0
create constant IRQ_SERIAL as Integer = 4
create constant IRQ_FLOPPY as Integer = 6
create constant IRQ_ETHERNET as Integer = 11